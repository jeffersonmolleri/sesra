<?php


/**
 * Skeleton subclass for performing query and update operations on the 'activities' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Mon Apr  2 10:11:37 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class ActivityPeer extends BaseActivityPeer {

  public static function doSelectWithChildrenForProtocol($protocol, $onlyScheduled = false) {
    if (!($protocol instanceof Protocol) && is_numeric($protocol)) {
      $protocol = ProtocolPeer::retrieveByPK($protocol);
    }

    if (empty($protocol)) throw new Exception('Argumento deve ser um protocolo vÃ¡lido');

    if ($onlyScheduled) {
      $join = 'INNER';
      $filter = " AND EXISTS(SELECT id FROM jobs WHERE protocol_id = {$protocol->getId()} AND (activity_id = a.id OR activity_id IN (SELECT id FROM activities WHERE activity_parent = a.id))) ";
    }
    else {
      $join = 'LEFT';
      $filter = '';
    }

    $db = Propel::getConnection(ActivityPeer::DATABASE_NAME, Propel::CONNECTION_READ);
    $query = "WITH RECURSIVE ac AS ("
           . " SELECT a.id, a.name_pt, a.name_us, a.framework_name, a.activity_parent, a.description, a.framework_id, null::integer,"
           . " null::timestamp, null, null::integer, null::integer, null::integer,"
           . " null::timestamp, null::integer, null::integer, null::varchar, null::date, null::varchar, null::integer, null::varchar,"
           . " null::varchar, a.id * 10000 AS level FROM activities a WHERE a.activity_parent IS NULL AND framework_id = {$protocol->getFrameworkId()}"
           . " $filter "
           . " UNION ALL"
           . " SELECT ap.id, ap.name_pt, ap.name_us, ap.framework_name, ap.activity_parent, ap.description,"
           . " ap.framework_id, jb.id, jb.date, jb.description, jb.activity_id, jb.user_id, jb.protocol_id, jb.finished_at, jb.finished_by,"
           . " up.id, up.name, up.birthdate, up.email, up.user_id, up.institute, up.description,"
           . " ac.level + ap.id"
           . " FROM ac"
           . " INNER JOIN activities ap ON ap.activity_parent = ac.id "
           . " $join JOIN (jobs jb"
           . "   INNER JOIN protocols pt ON pt.id = jb.protocol_id AND pt.id = {$protocol->getId()}"
           . "   INNER JOIN sf_guard_user_profile up ON up.user_id = jb.user_id"
           . " ) ON jb.activity_id = ap.id"
           . " ) SELECT * FROM ac ORDER BY level";

    $stmt = $db->query($query);
    $results = array();

    $startcol = (ActivityPeer::NUM_COLUMNS - ActivityPeer::NUM_LAZY_LOAD_COLUMNS);
    $startusercol = $startcol + (JobPeer::NUM_COLUMNS - JobPeer::NUM_LAZY_LOAD_COLUMNS);

    while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
      $key1 = ActivityPeer::getPrimaryKeyHashFromRow($row, 0);
      if (null !== ($obj1 = ActivityPeer::getInstanceFromPool($key1))) {
      } else {

        $cls = ActivityPeer::getOMClass(false);

        $obj1 = new $cls();
        $obj1->hydrate($row);
        ActivityPeer::addInstanceToPool($obj1, $key1);
      } // if $obj1 already loaded

      $key2 = JobPeer::getPrimaryKeyHashFromRow($row, $startcol);
      if ($key2 !== null) {
        $obj2 = JobPeer::getInstanceFromPool($key2);
        if (!$obj2) {

          $cls = JobPeer::getOMClass(false);

          $obj2 = new $cls();
          $obj2->hydrate($row, $startcol);
          JobPeer::addInstanceToPool($obj2, $key2);
        } // if obj2 already loaded

        $key3 = sfGuardUserProfilePeer::getPrimaryKeyHashFromRow($row, $startusercol);
        if ($key3 !== null) {
          $obj3 = sfGuardUserProfilePeer::getInstanceFromPool($key3);
          if (!$obj3) {

            $cls = sfGuardUserProfilePeer::getOMClass(false);

            $obj3 = new $cls();
            $obj3->hydrate($row, $startusercol);
            sfGuardUserProfilePeer::addInstanceToPool($obj3, $key3);
          } // if obj3 already loaded

          // Add the $obj2 (Job) to $obj3 (UserProfile)
          $obj2->setUserIdProfile($obj3);

        } // if joined row was not null


        // Add the $obj1 (Activity) to $obj2 (Job)
        $obj1->addJob($obj2);
      } // if joined row was not null

      $results[] = $obj1;
    }
    $stmt->closeCursor();
    return $results;
  }

} // ActivityPeer
