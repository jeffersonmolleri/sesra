<?php


/**
 * Skeleton subclass for performing query and update operations on the 'systematic_reviews_users' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sat Oct 20 13:59:37 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class SystematicReviewUserPeer extends BaseSystematicReviewUserPeer {

  /**
   * Selects a collection of SystematicReviewUser objects pre-filled with their sfGuardUser objects.
   * @param      Criteria  $criteria
   * @param      PropelPDO $con
   * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
   * @return     array Array of SystematicReviewUser objects.
   * @throws     PropelException Any exceptions caught during processing will be
   *		 rethrown wrapped into a PropelException.
   */
  public static function doSelectJoinsfGuardUserPlusProfile(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
  {
    $criteria = clone $criteria;

    // Set the correct dbName if it has not been overridden
    if ($criteria->getDbName() == Propel::getDefaultDB()) {
      $criteria->setDbName(self::DATABASE_NAME);
    }

    SystematicReviewUserPeer::addSelectColumns($criteria);
    $startcol = (SystematicReviewUserPeer::NUM_COLUMNS - SystematicReviewUserPeer::NUM_LAZY_LOAD_COLUMNS);
    sfGuardUserPeer::addSelectColumns($criteria);
    $startprofilecol = $startcol + (sfGuardUserPeer::NUM_COLUMNS - sfGuardUserPeer::NUM_LAZY_LOAD_COLUMNS);
    sfGuardUserProfilePeer::addSelectColumns($criteria);

    $criteria->addJoin(SystematicReviewUserPeer::USER_ID, sfGuardUserPeer::ID, $join_behavior);
    $criteria->addJoin(sfGuardUserPeer::ID, sfGuardUserProfilePeer::USER_ID, Criteria::LEFT_JOIN);

    $stmt = BasePeer::doSelect($criteria, $con);
    $results = array();

    while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
      $key1 = SystematicReviewUserPeer::getPrimaryKeyHashFromRow($row, 0);
      if (null !== ($obj1 = SystematicReviewUserPeer::getInstanceFromPool($key1))) {
        // We no longer rehydrate the object, since this can cause data loss.
        // See http://propel.phpdb.org/trac/ticket/509
        // $obj1->hydrate($row, 0, true); // rehydrate
      } else {

        $cls = SystematicReviewUserPeer::getOMClass(false);

        $obj1 = new $cls();
        $obj1->hydrate($row);
        SystematicReviewUserPeer::addInstanceToPool($obj1, $key1);
      } // if $obj1 already loaded

      $key2 = sfGuardUserPeer::getPrimaryKeyHashFromRow($row, $startcol);
      if ($key2 !== null) {
        $obj2 = sfGuardUserPeer::getInstanceFromPool($key2);
        if (!$obj2) {

          $cls = sfGuardUserPeer::getOMClass(false);

          $obj2 = new $cls();
          $obj2->hydrate($row, $startcol);
          sfGuardUserPeer::addInstanceToPool($obj2, $key2);

        } // if obj2 already loaded

        // Add the $obj1 (SystematicReviewUser) to $obj2 (sfGuardUser)
        $obj2->addSystematicReviewUser($obj1);

        $key3 = sfGuardUserProfilePeer::getPrimaryKeyHashFromRow($row, $startprofilecol);
        if ($key3 !== null) {
          $obj3 = sfGuardUserProfilePeer::getInstanceFromPool($key3);
          if (!$obj3) {
            $cls = sfGuardUserProfilePeer::getOMClass(false);

            $obj3 = new $cls();
            $obj3->hydrate($row, $startprofilecol);
            sfGuardUserProfilePeer::addInstanceToPool($obj3, $key3);
          }

          $obj2->setProfile($obj3);
        }
      } // if joined row was not null

      $results[] = $obj1;
    }
    $stmt->closeCursor();
    return $results;
  }
} // SystematicReviewUserPeer
