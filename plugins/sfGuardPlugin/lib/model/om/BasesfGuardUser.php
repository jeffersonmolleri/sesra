<?php

/**
 * Base class that represents a row from the 'sf_guard_user' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Aug 22 18:29:00 2013
 *
 * @package    plugins.sfGuardPlugin.lib.model.om
 */
abstract class BasesfGuardUser extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        sfGuardUserPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the username field.
	 * @var        string
	 */
	protected $username;

	/**
	 * The value for the algorithm field.
	 * Note: this column has a database default value of: 'sha1'
	 * @var        string
	 */
	protected $algorithm;

	/**
	 * The value for the salt field.
	 * @var        string
	 */
	protected $salt;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the last_login field.
	 * @var        string
	 */
	protected $last_login;

	/**
	 * The value for the is_active field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_active;

	/**
	 * The value for the is_super_admin field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_super_admin;

	/**
	 * @var        array sfGuardUserProfile[] Collection to store aggregation of sfGuardUserProfile objects.
	 */
	protected $collsfGuardUserProfiles;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardUserProfiles.
	 */
	private $lastsfGuardUserProfileCriteria = null;

	/**
	 * @var        array SystematicReview[] Collection to store aggregation of SystematicReview objects.
	 */
	protected $collSystematicReviewsRelatedByCreatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSystematicReviewsRelatedByCreatedBy.
	 */
	private $lastSystematicReviewRelatedByCreatedByCriteria = null;

	/**
	 * @var        array SystematicReview[] Collection to store aggregation of SystematicReview objects.
	 */
	protected $collSystematicReviewsRelatedByUpdatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSystematicReviewsRelatedByUpdatedBy.
	 */
	private $lastSystematicReviewRelatedByUpdatedByCriteria = null;

	/**
	 * @var        array SystematicReview[] Collection to store aggregation of SystematicReview objects.
	 */
	protected $collSystematicReviewsRelatedByDeletedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSystematicReviewsRelatedByDeletedBy.
	 */
	private $lastSystematicReviewRelatedByDeletedByCriteria = null;

	/**
	 * @var        array SystematicReviewUser[] Collection to store aggregation of SystematicReviewUser objects.
	 */
	protected $collSystematicReviewUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSystematicReviewUsers.
	 */
	private $lastSystematicReviewUserCriteria = null;

	/**
	 * @var        array Study[] Collection to store aggregation of Study objects.
	 */
	protected $collStudysRelatedByCastingVote;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStudysRelatedByCastingVote.
	 */
	private $lastStudyRelatedByCastingVoteCriteria = null;

	/**
	 * @var        array Study[] Collection to store aggregation of Study objects.
	 */
	protected $collStudysRelatedByCreatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStudysRelatedByCreatedBy.
	 */
	private $lastStudyRelatedByCreatedByCriteria = null;

	/**
	 * @var        array Study[] Collection to store aggregation of Study objects.
	 */
	protected $collStudysRelatedByUpdatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStudysRelatedByUpdatedBy.
	 */
	private $lastStudyRelatedByUpdatedByCriteria = null;

	/**
	 * @var        array Study[] Collection to store aggregation of Study objects.
	 */
	protected $collStudysRelatedByDeletedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStudysRelatedByDeletedBy.
	 */
	private $lastStudyRelatedByDeletedByCriteria = null;

	/**
	 * @var        array StudyUserCriteria[] Collection to store aggregation of StudyUserCriteria objects.
	 */
	protected $collStudyUserCriterias;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStudyUserCriterias.
	 */
	private $lastStudyUserCriteriaCriteria = null;

	/**
	 * @var        array Questionnaire[] Collection to store aggregation of Questionnaire objects.
	 */
	protected $collQuestionnairesRelatedByCreatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collQuestionnairesRelatedByCreatedBy.
	 */
	private $lastQuestionnaireRelatedByCreatedByCriteria = null;

	/**
	 * @var        array Questionnaire[] Collection to store aggregation of Questionnaire objects.
	 */
	protected $collQuestionnairesRelatedByUpdatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collQuestionnairesRelatedByUpdatedBy.
	 */
	private $lastQuestionnaireRelatedByUpdatedByCriteria = null;

	/**
	 * @var        array Questionnaire[] Collection to store aggregation of Questionnaire objects.
	 */
	protected $collQuestionnairesRelatedByDeletedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collQuestionnairesRelatedByDeletedBy.
	 */
	private $lastQuestionnaireRelatedByDeletedByCriteria = null;

	/**
	 * @var        array Question[] Collection to store aggregation of Question objects.
	 */
	protected $collQuestionsRelatedByCreatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collQuestionsRelatedByCreatedBy.
	 */
	private $lastQuestionRelatedByCreatedByCriteria = null;

	/**
	 * @var        array Question[] Collection to store aggregation of Question objects.
	 */
	protected $collQuestionsRelatedByUpdatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collQuestionsRelatedByUpdatedBy.
	 */
	private $lastQuestionRelatedByUpdatedByCriteria = null;

	/**
	 * @var        array Question[] Collection to store aggregation of Question objects.
	 */
	protected $collQuestionsRelatedByDeletedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collQuestionsRelatedByDeletedBy.
	 */
	private $lastQuestionRelatedByDeletedByCriteria = null;

	/**
	 * @var        array Answer[] Collection to store aggregation of Answer objects.
	 */
	protected $collAnswersRelatedByCreatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAnswersRelatedByCreatedBy.
	 */
	private $lastAnswerRelatedByCreatedByCriteria = null;

	/**
	 * @var        array Answer[] Collection to store aggregation of Answer objects.
	 */
	protected $collAnswersRelatedByUpdatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAnswersRelatedByUpdatedBy.
	 */
	private $lastAnswerRelatedByUpdatedByCriteria = null;

	/**
	 * @var        array Answer[] Collection to store aggregation of Answer objects.
	 */
	protected $collAnswersRelatedByDeletedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAnswersRelatedByDeletedBy.
	 */
	private $lastAnswerRelatedByDeletedByCriteria = null;

	/**
	 * @var        array RslCriteria[] Collection to store aggregation of RslCriteria objects.
	 */
	protected $collRslCriteriasRelatedByCreatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRslCriteriasRelatedByCreatedBy.
	 */
	private $lastRslCriteriaRelatedByCreatedByCriteria = null;

	/**
	 * @var        array RslCriteria[] Collection to store aggregation of RslCriteria objects.
	 */
	protected $collRslCriteriasRelatedByUpdatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRslCriteriasRelatedByUpdatedBy.
	 */
	private $lastRslCriteriaRelatedByUpdatedByCriteria = null;

	/**
	 * @var        array RslCriteria[] Collection to store aggregation of RslCriteria objects.
	 */
	protected $collRslCriteriasRelatedByDeletedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRslCriteriasRelatedByDeletedBy.
	 */
	private $lastRslCriteriaRelatedByDeletedByCriteria = null;

	/**
	 * @var        array RslResult[] Collection to store aggregation of RslResult objects.
	 */
	protected $collRslResultsRelatedByCreatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRslResultsRelatedByCreatedBy.
	 */
	private $lastRslResultRelatedByCreatedByCriteria = null;

	/**
	 * @var        array RslResult[] Collection to store aggregation of RslResult objects.
	 */
	protected $collRslResultsRelatedByUpdatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRslResultsRelatedByUpdatedBy.
	 */
	private $lastRslResultRelatedByUpdatedByCriteria = null;

	/**
	 * @var        array RslResult[] Collection to store aggregation of RslResult objects.
	 */
	protected $collRslResultsRelatedByDeletedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRslResultsRelatedByDeletedBy.
	 */
	private $lastRslResultRelatedByDeletedByCriteria = null;

	/**
	 * @var        array Job[] Collection to store aggregation of Job objects.
	 */
	protected $collJobsRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJobsRelatedByUserId.
	 */
	private $lastJobRelatedByUserIdCriteria = null;

	/**
	 * @var        array Job[] Collection to store aggregation of Job objects.
	 */
	protected $collJobsRelatedByFinishedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJobsRelatedByFinishedBy.
	 */
	private $lastJobRelatedByFinishedByCriteria = null;

	/**
	 * @var        array DataExtraction[] Collection to store aggregation of DataExtraction objects.
	 */
	protected $collDataExtractionsRelatedByCreatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDataExtractionsRelatedByCreatedBy.
	 */
	private $lastDataExtractionRelatedByCreatedByCriteria = null;

	/**
	 * @var        array DataExtraction[] Collection to store aggregation of DataExtraction objects.
	 */
	protected $collDataExtractionsRelatedByUpdatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDataExtractionsRelatedByUpdatedBy.
	 */
	private $lastDataExtractionRelatedByUpdatedByCriteria = null;

	/**
	 * @var        array DataExtraction[] Collection to store aggregation of DataExtraction objects.
	 */
	protected $collDataExtractionsRelatedByDeletedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDataExtractionsRelatedByDeletedBy.
	 */
	private $lastDataExtractionRelatedByDeletedByCriteria = null;

	/**
	 * @var        array AccessToken[] Collection to store aggregation of AccessToken objects.
	 */
	protected $collAccessTokens;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAccessTokens.
	 */
	private $lastAccessTokenCriteria = null;

	/**
	 * @var        array sfGuardUserPermission[] Collection to store aggregation of sfGuardUserPermission objects.
	 */
	protected $collsfGuardUserPermissions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardUserPermissions.
	 */
	private $lastsfGuardUserPermissionCriteria = null;

	/**
	 * @var        array sfGuardUserGroup[] Collection to store aggregation of sfGuardUserGroup objects.
	 */
	protected $collsfGuardUserGroups;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardUserGroups.
	 */
	private $lastsfGuardUserGroupCriteria = null;

	/**
	 * @var        array sfGuardRememberKey[] Collection to store aggregation of sfGuardRememberKey objects.
	 */
	protected $collsfGuardRememberKeys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardRememberKeys.
	 */
	private $lastsfGuardRememberKeyCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'sfGuardUserPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->algorithm = 'sha1';
		$this->is_active = true;
		$this->is_super_admin = false;
	}

	/**
	 * Initializes internal state of BasesfGuardUser object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [username] column value.
	 * 
	 * @return     string
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * Get the [algorithm] column value.
	 * 
	 * @return     string
	 */
	public function getAlgorithm()
	{
		return $this->algorithm;
	}

	/**
	 * Get the [salt] column value.
	 * 
	 * @return     string
	 */
	public function getSalt()
	{
		return $this->salt;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [last_login] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastLogin($format = 'Y-m-d H:i:s')
	{
		if ($this->last_login === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->last_login);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_login, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [is_active] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsActive()
	{
		return $this->is_active;
	}

	/**
	 * Get the [is_super_admin] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsSuperAdmin()
	{
		return $this->is_super_admin;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [username] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->username !== $v) {
			$this->username = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::USERNAME;
		}

		return $this;
	} // setUsername()

	/**
	 * Set the value of [algorithm] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setAlgorithm($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->algorithm !== $v || $this->isNew()) {
			$this->algorithm = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::ALGORITHM;
		}

		return $this;
	} // setAlgorithm()

	/**
	 * Set the value of [salt] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setSalt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->salt !== $v) {
			$this->salt = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::SALT;
		}

		return $this;
	} // setSalt()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d\\TH:i:sO') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d\\TH:i:sO') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d\\TH:i:sO') : null);
				$this->modifiedColumns[] = sfGuardUserPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [last_login] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setLastLogin($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_login !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_login !== null && $tmpDt = new DateTime($this->last_login)) ? $tmpDt->format('Y-m-d\\TH:i:sO') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d\\TH:i:sO') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_login = ($dt ? $dt->format('Y-m-d\\TH:i:sO') : null);
				$this->modifiedColumns[] = sfGuardUserPeer::LAST_LOGIN;
			}
		} // if either are not null

		return $this;
	} // setLastLogin()

	/**
	 * Set the value of [is_active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setIsActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_active !== $v || $this->isNew()) {
			$this->is_active = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::IS_ACTIVE;
		}

		return $this;
	} // setIsActive()

	/**
	 * Set the value of [is_super_admin] column.
	 * 
	 * @param      boolean $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setIsSuperAdmin($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_super_admin !== $v || $this->isNew()) {
			$this->is_super_admin = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::IS_SUPER_ADMIN;
		}

		return $this;
	} // setIsSuperAdmin()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->algorithm !== 'sha1') {
				return false;
			}

			if ($this->is_active !== true) {
				return false;
			}

			if ($this->is_super_admin !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->username = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->algorithm = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->salt = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->password = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->created_at = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->last_login = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->is_active = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->is_super_admin = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 9; // 9 = sfGuardUserPeer::NUM_COLUMNS - sfGuardUserPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating sfGuardUser object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = sfGuardUserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collsfGuardUserProfiles = null;
			$this->lastsfGuardUserProfileCriteria = null;

			$this->collSystematicReviewsRelatedByCreatedBy = null;
			$this->lastSystematicReviewRelatedByCreatedByCriteria = null;

			$this->collSystematicReviewsRelatedByUpdatedBy = null;
			$this->lastSystematicReviewRelatedByUpdatedByCriteria = null;

			$this->collSystematicReviewsRelatedByDeletedBy = null;
			$this->lastSystematicReviewRelatedByDeletedByCriteria = null;

			$this->collSystematicReviewUsers = null;
			$this->lastSystematicReviewUserCriteria = null;

			$this->collStudysRelatedByCastingVote = null;
			$this->lastStudyRelatedByCastingVoteCriteria = null;

			$this->collStudysRelatedByCreatedBy = null;
			$this->lastStudyRelatedByCreatedByCriteria = null;

			$this->collStudysRelatedByUpdatedBy = null;
			$this->lastStudyRelatedByUpdatedByCriteria = null;

			$this->collStudysRelatedByDeletedBy = null;
			$this->lastStudyRelatedByDeletedByCriteria = null;

			$this->collStudyUserCriterias = null;
			$this->lastStudyUserCriteriaCriteria = null;

			$this->collQuestionnairesRelatedByCreatedBy = null;
			$this->lastQuestionnaireRelatedByCreatedByCriteria = null;

			$this->collQuestionnairesRelatedByUpdatedBy = null;
			$this->lastQuestionnaireRelatedByUpdatedByCriteria = null;

			$this->collQuestionnairesRelatedByDeletedBy = null;
			$this->lastQuestionnaireRelatedByDeletedByCriteria = null;

			$this->collQuestionsRelatedByCreatedBy = null;
			$this->lastQuestionRelatedByCreatedByCriteria = null;

			$this->collQuestionsRelatedByUpdatedBy = null;
			$this->lastQuestionRelatedByUpdatedByCriteria = null;

			$this->collQuestionsRelatedByDeletedBy = null;
			$this->lastQuestionRelatedByDeletedByCriteria = null;

			$this->collAnswersRelatedByCreatedBy = null;
			$this->lastAnswerRelatedByCreatedByCriteria = null;

			$this->collAnswersRelatedByUpdatedBy = null;
			$this->lastAnswerRelatedByUpdatedByCriteria = null;

			$this->collAnswersRelatedByDeletedBy = null;
			$this->lastAnswerRelatedByDeletedByCriteria = null;

			$this->collRslCriteriasRelatedByCreatedBy = null;
			$this->lastRslCriteriaRelatedByCreatedByCriteria = null;

			$this->collRslCriteriasRelatedByUpdatedBy = null;
			$this->lastRslCriteriaRelatedByUpdatedByCriteria = null;

			$this->collRslCriteriasRelatedByDeletedBy = null;
			$this->lastRslCriteriaRelatedByDeletedByCriteria = null;

			$this->collRslResultsRelatedByCreatedBy = null;
			$this->lastRslResultRelatedByCreatedByCriteria = null;

			$this->collRslResultsRelatedByUpdatedBy = null;
			$this->lastRslResultRelatedByUpdatedByCriteria = null;

			$this->collRslResultsRelatedByDeletedBy = null;
			$this->lastRslResultRelatedByDeletedByCriteria = null;

			$this->collJobsRelatedByUserId = null;
			$this->lastJobRelatedByUserIdCriteria = null;

			$this->collJobsRelatedByFinishedBy = null;
			$this->lastJobRelatedByFinishedByCriteria = null;

			$this->collDataExtractionsRelatedByCreatedBy = null;
			$this->lastDataExtractionRelatedByCreatedByCriteria = null;

			$this->collDataExtractionsRelatedByUpdatedBy = null;
			$this->lastDataExtractionRelatedByUpdatedByCriteria = null;

			$this->collDataExtractionsRelatedByDeletedBy = null;
			$this->lastDataExtractionRelatedByDeletedByCriteria = null;

			$this->collAccessTokens = null;
			$this->lastAccessTokenCriteria = null;

			$this->collsfGuardUserPermissions = null;
			$this->lastsfGuardUserPermissionCriteria = null;

			$this->collsfGuardUserGroups = null;
			$this->lastsfGuardUserGroupCriteria = null;

			$this->collsfGuardRememberKeys = null;
			$this->lastsfGuardRememberKeyCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasesfGuardUser:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				sfGuardUserPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasesfGuardUser:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasesfGuardUser:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			
			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(sfGuardUserPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasesfGuardUser:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				sfGuardUserPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = sfGuardUserPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = sfGuardUserPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += sfGuardUserPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collsfGuardUserProfiles !== null) {
				foreach ($this->collsfGuardUserProfiles as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSystematicReviewsRelatedByCreatedBy !== null) {
				foreach ($this->collSystematicReviewsRelatedByCreatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSystematicReviewsRelatedByUpdatedBy !== null) {
				foreach ($this->collSystematicReviewsRelatedByUpdatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSystematicReviewsRelatedByDeletedBy !== null) {
				foreach ($this->collSystematicReviewsRelatedByDeletedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSystematicReviewUsers !== null) {
				foreach ($this->collSystematicReviewUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStudysRelatedByCastingVote !== null) {
				foreach ($this->collStudysRelatedByCastingVote as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStudysRelatedByCreatedBy !== null) {
				foreach ($this->collStudysRelatedByCreatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStudysRelatedByUpdatedBy !== null) {
				foreach ($this->collStudysRelatedByUpdatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStudysRelatedByDeletedBy !== null) {
				foreach ($this->collStudysRelatedByDeletedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStudyUserCriterias !== null) {
				foreach ($this->collStudyUserCriterias as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collQuestionnairesRelatedByCreatedBy !== null) {
				foreach ($this->collQuestionnairesRelatedByCreatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collQuestionnairesRelatedByUpdatedBy !== null) {
				foreach ($this->collQuestionnairesRelatedByUpdatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collQuestionnairesRelatedByDeletedBy !== null) {
				foreach ($this->collQuestionnairesRelatedByDeletedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collQuestionsRelatedByCreatedBy !== null) {
				foreach ($this->collQuestionsRelatedByCreatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collQuestionsRelatedByUpdatedBy !== null) {
				foreach ($this->collQuestionsRelatedByUpdatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collQuestionsRelatedByDeletedBy !== null) {
				foreach ($this->collQuestionsRelatedByDeletedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAnswersRelatedByCreatedBy !== null) {
				foreach ($this->collAnswersRelatedByCreatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAnswersRelatedByUpdatedBy !== null) {
				foreach ($this->collAnswersRelatedByUpdatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAnswersRelatedByDeletedBy !== null) {
				foreach ($this->collAnswersRelatedByDeletedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRslCriteriasRelatedByCreatedBy !== null) {
				foreach ($this->collRslCriteriasRelatedByCreatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRslCriteriasRelatedByUpdatedBy !== null) {
				foreach ($this->collRslCriteriasRelatedByUpdatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRslCriteriasRelatedByDeletedBy !== null) {
				foreach ($this->collRslCriteriasRelatedByDeletedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRslResultsRelatedByCreatedBy !== null) {
				foreach ($this->collRslResultsRelatedByCreatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRslResultsRelatedByUpdatedBy !== null) {
				foreach ($this->collRslResultsRelatedByUpdatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRslResultsRelatedByDeletedBy !== null) {
				foreach ($this->collRslResultsRelatedByDeletedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJobsRelatedByUserId !== null) {
				foreach ($this->collJobsRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJobsRelatedByFinishedBy !== null) {
				foreach ($this->collJobsRelatedByFinishedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDataExtractionsRelatedByCreatedBy !== null) {
				foreach ($this->collDataExtractionsRelatedByCreatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDataExtractionsRelatedByUpdatedBy !== null) {
				foreach ($this->collDataExtractionsRelatedByUpdatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDataExtractionsRelatedByDeletedBy !== null) {
				foreach ($this->collDataExtractionsRelatedByDeletedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAccessTokens !== null) {
				foreach ($this->collAccessTokens as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfGuardUserPermissions !== null) {
				foreach ($this->collsfGuardUserPermissions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfGuardUserGroups !== null) {
				foreach ($this->collsfGuardUserGroups as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfGuardRememberKeys !== null) {
				foreach ($this->collsfGuardRememberKeys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = sfGuardUserPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collsfGuardUserProfiles !== null) {
					foreach ($this->collsfGuardUserProfiles as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSystematicReviewsRelatedByCreatedBy !== null) {
					foreach ($this->collSystematicReviewsRelatedByCreatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSystematicReviewsRelatedByUpdatedBy !== null) {
					foreach ($this->collSystematicReviewsRelatedByUpdatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSystematicReviewsRelatedByDeletedBy !== null) {
					foreach ($this->collSystematicReviewsRelatedByDeletedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSystematicReviewUsers !== null) {
					foreach ($this->collSystematicReviewUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStudysRelatedByCastingVote !== null) {
					foreach ($this->collStudysRelatedByCastingVote as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStudysRelatedByCreatedBy !== null) {
					foreach ($this->collStudysRelatedByCreatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStudysRelatedByUpdatedBy !== null) {
					foreach ($this->collStudysRelatedByUpdatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStudysRelatedByDeletedBy !== null) {
					foreach ($this->collStudysRelatedByDeletedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStudyUserCriterias !== null) {
					foreach ($this->collStudyUserCriterias as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collQuestionnairesRelatedByCreatedBy !== null) {
					foreach ($this->collQuestionnairesRelatedByCreatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collQuestionnairesRelatedByUpdatedBy !== null) {
					foreach ($this->collQuestionnairesRelatedByUpdatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collQuestionnairesRelatedByDeletedBy !== null) {
					foreach ($this->collQuestionnairesRelatedByDeletedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collQuestionsRelatedByCreatedBy !== null) {
					foreach ($this->collQuestionsRelatedByCreatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collQuestionsRelatedByUpdatedBy !== null) {
					foreach ($this->collQuestionsRelatedByUpdatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collQuestionsRelatedByDeletedBy !== null) {
					foreach ($this->collQuestionsRelatedByDeletedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAnswersRelatedByCreatedBy !== null) {
					foreach ($this->collAnswersRelatedByCreatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAnswersRelatedByUpdatedBy !== null) {
					foreach ($this->collAnswersRelatedByUpdatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAnswersRelatedByDeletedBy !== null) {
					foreach ($this->collAnswersRelatedByDeletedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRslCriteriasRelatedByCreatedBy !== null) {
					foreach ($this->collRslCriteriasRelatedByCreatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRslCriteriasRelatedByUpdatedBy !== null) {
					foreach ($this->collRslCriteriasRelatedByUpdatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRslCriteriasRelatedByDeletedBy !== null) {
					foreach ($this->collRslCriteriasRelatedByDeletedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRslResultsRelatedByCreatedBy !== null) {
					foreach ($this->collRslResultsRelatedByCreatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRslResultsRelatedByUpdatedBy !== null) {
					foreach ($this->collRslResultsRelatedByUpdatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRslResultsRelatedByDeletedBy !== null) {
					foreach ($this->collRslResultsRelatedByDeletedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJobsRelatedByUserId !== null) {
					foreach ($this->collJobsRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJobsRelatedByFinishedBy !== null) {
					foreach ($this->collJobsRelatedByFinishedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDataExtractionsRelatedByCreatedBy !== null) {
					foreach ($this->collDataExtractionsRelatedByCreatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDataExtractionsRelatedByUpdatedBy !== null) {
					foreach ($this->collDataExtractionsRelatedByUpdatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDataExtractionsRelatedByDeletedBy !== null) {
					foreach ($this->collDataExtractionsRelatedByDeletedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAccessTokens !== null) {
					foreach ($this->collAccessTokens as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfGuardUserPermissions !== null) {
					foreach ($this->collsfGuardUserPermissions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfGuardUserGroups !== null) {
					foreach ($this->collsfGuardUserGroups as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfGuardRememberKeys !== null) {
					foreach ($this->collsfGuardRememberKeys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfGuardUserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getUsername();
				break;
			case 2:
				return $this->getAlgorithm();
				break;
			case 3:
				return $this->getSalt();
				break;
			case 4:
				return $this->getPassword();
				break;
			case 5:
				return $this->getCreatedAt();
				break;
			case 6:
				return $this->getLastLogin();
				break;
			case 7:
				return $this->getIsActive();
				break;
			case 8:
				return $this->getIsSuperAdmin();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = sfGuardUserPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getUsername(),
			$keys[2] => $this->getAlgorithm(),
			$keys[3] => $this->getSalt(),
			$keys[4] => $this->getPassword(),
			$keys[5] => $this->getCreatedAt(),
			$keys[6] => $this->getLastLogin(),
			$keys[7] => $this->getIsActive(),
			$keys[8] => $this->getIsSuperAdmin(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfGuardUserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setUsername($value);
				break;
			case 2:
				$this->setAlgorithm($value);
				break;
			case 3:
				$this->setSalt($value);
				break;
			case 4:
				$this->setPassword($value);
				break;
			case 5:
				$this->setCreatedAt($value);
				break;
			case 6:
				$this->setLastLogin($value);
				break;
			case 7:
				$this->setIsActive($value);
				break;
			case 8:
				$this->setIsSuperAdmin($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = sfGuardUserPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setUsername($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAlgorithm($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSalt($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setPassword($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCreatedAt($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setLastLogin($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIsActive($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIsSuperAdmin($arr[$keys[8]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);

		if ($this->isColumnModified(sfGuardUserPeer::ID)) $criteria->add(sfGuardUserPeer::ID, $this->id);
		if ($this->isColumnModified(sfGuardUserPeer::USERNAME)) $criteria->add(sfGuardUserPeer::USERNAME, $this->username);
		if ($this->isColumnModified(sfGuardUserPeer::ALGORITHM)) $criteria->add(sfGuardUserPeer::ALGORITHM, $this->algorithm);
		if ($this->isColumnModified(sfGuardUserPeer::SALT)) $criteria->add(sfGuardUserPeer::SALT, $this->salt);
		if ($this->isColumnModified(sfGuardUserPeer::PASSWORD)) $criteria->add(sfGuardUserPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(sfGuardUserPeer::CREATED_AT)) $criteria->add(sfGuardUserPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(sfGuardUserPeer::LAST_LOGIN)) $criteria->add(sfGuardUserPeer::LAST_LOGIN, $this->last_login);
		if ($this->isColumnModified(sfGuardUserPeer::IS_ACTIVE)) $criteria->add(sfGuardUserPeer::IS_ACTIVE, $this->is_active);
		if ($this->isColumnModified(sfGuardUserPeer::IS_SUPER_ADMIN)) $criteria->add(sfGuardUserPeer::IS_SUPER_ADMIN, $this->is_super_admin);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);

		$criteria->add(sfGuardUserPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of sfGuardUser (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setUsername($this->username);

		$copyObj->setAlgorithm($this->algorithm);

		$copyObj->setSalt($this->salt);

		$copyObj->setPassword($this->password);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setLastLogin($this->last_login);

		$copyObj->setIsActive($this->is_active);

		$copyObj->setIsSuperAdmin($this->is_super_admin);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getsfGuardUserProfiles() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardUserProfile($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSystematicReviewsRelatedByCreatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSystematicReviewRelatedByCreatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSystematicReviewsRelatedByUpdatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSystematicReviewRelatedByUpdatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSystematicReviewsRelatedByDeletedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSystematicReviewRelatedByDeletedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSystematicReviewUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSystematicReviewUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStudysRelatedByCastingVote() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStudyRelatedByCastingVote($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStudysRelatedByCreatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStudyRelatedByCreatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStudysRelatedByUpdatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStudyRelatedByUpdatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStudysRelatedByDeletedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStudyRelatedByDeletedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStudyUserCriterias() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStudyUserCriteria($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getQuestionnairesRelatedByCreatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addQuestionnaireRelatedByCreatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getQuestionnairesRelatedByUpdatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addQuestionnaireRelatedByUpdatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getQuestionnairesRelatedByDeletedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addQuestionnaireRelatedByDeletedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getQuestionsRelatedByCreatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addQuestionRelatedByCreatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getQuestionsRelatedByUpdatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addQuestionRelatedByUpdatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getQuestionsRelatedByDeletedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addQuestionRelatedByDeletedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAnswersRelatedByCreatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAnswerRelatedByCreatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAnswersRelatedByUpdatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAnswerRelatedByUpdatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAnswersRelatedByDeletedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAnswerRelatedByDeletedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRslCriteriasRelatedByCreatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRslCriteriaRelatedByCreatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRslCriteriasRelatedByUpdatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRslCriteriaRelatedByUpdatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRslCriteriasRelatedByDeletedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRslCriteriaRelatedByDeletedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRslResultsRelatedByCreatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRslResultRelatedByCreatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRslResultsRelatedByUpdatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRslResultRelatedByUpdatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRslResultsRelatedByDeletedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRslResultRelatedByDeletedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJobsRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJobRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJobsRelatedByFinishedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJobRelatedByFinishedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDataExtractionsRelatedByCreatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDataExtractionRelatedByCreatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDataExtractionsRelatedByUpdatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDataExtractionRelatedByUpdatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDataExtractionsRelatedByDeletedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDataExtractionRelatedByDeletedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAccessTokens() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAccessToken($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfGuardUserPermissions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardUserPermission($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfGuardUserGroups() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardUserGroup($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfGuardRememberKeys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardRememberKey($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     sfGuardUser Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     sfGuardUserPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new sfGuardUserPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collsfGuardUserProfiles collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardUserProfiles()
	 */
	public function clearsfGuardUserProfiles()
	{
		$this->collsfGuardUserProfiles = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardUserProfiles collection (array).
	 *
	 * By default this just sets the collsfGuardUserProfiles collection to an empty array (like clearcollsfGuardUserProfiles());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardUserProfiles()
	{
		$this->collsfGuardUserProfiles = array();
	}

	/**
	 * Gets an array of sfGuardUserProfile objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardUserProfiles from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardUserProfile[]
	 * @throws     PropelException
	 */
	public function getsfGuardUserProfiles($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserProfiles === null) {
			if ($this->isNew()) {
			   $this->collsfGuardUserProfiles = array();
			} else {

				$criteria->add(sfGuardUserProfilePeer::USER_ID, $this->id);

				sfGuardUserProfilePeer::addSelectColumns($criteria);
				$this->collsfGuardUserProfiles = sfGuardUserProfilePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardUserProfilePeer::USER_ID, $this->id);

				sfGuardUserProfilePeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardUserProfileCriteria) || !$this->lastsfGuardUserProfileCriteria->equals($criteria)) {
					$this->collsfGuardUserProfiles = sfGuardUserProfilePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardUserProfileCriteria = $criteria;
		return $this->collsfGuardUserProfiles;
	}

	/**
	 * Returns the number of related sfGuardUserProfile objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardUserProfile objects.
	 * @throws     PropelException
	 */
	public function countsfGuardUserProfiles(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardUserProfiles === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardUserProfilePeer::USER_ID, $this->id);

				$count = sfGuardUserProfilePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardUserProfilePeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardUserProfileCriteria) || !$this->lastsfGuardUserProfileCriteria->equals($criteria)) {
					$count = sfGuardUserProfilePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collsfGuardUserProfiles);
				}
			} else {
				$count = count($this->collsfGuardUserProfiles);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardUserProfile object to this object
	 * through the sfGuardUserProfile foreign key attribute.
	 *
	 * @param      sfGuardUserProfile $l sfGuardUserProfile
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardUserProfile(sfGuardUserProfile $l)
	{
		if ($this->collsfGuardUserProfiles === null) {
			$this->initsfGuardUserProfiles();
		}
		if (!in_array($l, $this->collsfGuardUserProfiles, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardUserProfiles, $l);
			$l->setsfGuardUser($this);
		}
	}

	/**
	 * Clears out the collSystematicReviewsRelatedByCreatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSystematicReviewsRelatedByCreatedBy()
	 */
	public function clearSystematicReviewsRelatedByCreatedBy()
	{
		$this->collSystematicReviewsRelatedByCreatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSystematicReviewsRelatedByCreatedBy collection (array).
	 *
	 * By default this just sets the collSystematicReviewsRelatedByCreatedBy collection to an empty array (like clearcollSystematicReviewsRelatedByCreatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSystematicReviewsRelatedByCreatedBy()
	{
		$this->collSystematicReviewsRelatedByCreatedBy = array();
	}

	/**
	 * Gets an array of SystematicReview objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related SystematicReviewsRelatedByCreatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SystematicReview[]
	 * @throws     PropelException
	 */
	public function getSystematicReviewsRelatedByCreatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSystematicReviewsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
			   $this->collSystematicReviewsRelatedByCreatedBy = array();
			} else {

				$criteria->add(SystematicReviewPeer::CREATED_BY, $this->id);

				SystematicReviewPeer::addSelectColumns($criteria);
				$this->collSystematicReviewsRelatedByCreatedBy = SystematicReviewPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SystematicReviewPeer::CREATED_BY, $this->id);

				SystematicReviewPeer::addSelectColumns($criteria);
				if (!isset($this->lastSystematicReviewRelatedByCreatedByCriteria) || !$this->lastSystematicReviewRelatedByCreatedByCriteria->equals($criteria)) {
					$this->collSystematicReviewsRelatedByCreatedBy = SystematicReviewPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSystematicReviewRelatedByCreatedByCriteria = $criteria;
		return $this->collSystematicReviewsRelatedByCreatedBy;
	}

	/**
	 * Returns the number of related SystematicReview objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SystematicReview objects.
	 * @throws     PropelException
	 */
	public function countSystematicReviewsRelatedByCreatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSystematicReviewsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SystematicReviewPeer::CREATED_BY, $this->id);

				$count = SystematicReviewPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SystematicReviewPeer::CREATED_BY, $this->id);

				if (!isset($this->lastSystematicReviewRelatedByCreatedByCriteria) || !$this->lastSystematicReviewRelatedByCreatedByCriteria->equals($criteria)) {
					$count = SystematicReviewPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSystematicReviewsRelatedByCreatedBy);
				}
			} else {
				$count = count($this->collSystematicReviewsRelatedByCreatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SystematicReview object to this object
	 * through the SystematicReview foreign key attribute.
	 *
	 * @param      SystematicReview $l SystematicReview
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSystematicReviewRelatedByCreatedBy(SystematicReview $l)
	{
		if ($this->collSystematicReviewsRelatedByCreatedBy === null) {
			$this->initSystematicReviewsRelatedByCreatedBy();
		}
		if (!in_array($l, $this->collSystematicReviewsRelatedByCreatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSystematicReviewsRelatedByCreatedBy, $l);
			$l->setsfGuardUserRelatedByCreatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related SystematicReviewsRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getSystematicReviewsRelatedByCreatedByJoinQuestionnaire($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSystematicReviewsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collSystematicReviewsRelatedByCreatedBy = array();
			} else {

				$criteria->add(SystematicReviewPeer::CREATED_BY, $this->id);

				$this->collSystematicReviewsRelatedByCreatedBy = SystematicReviewPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SystematicReviewPeer::CREATED_BY, $this->id);

			if (!isset($this->lastSystematicReviewRelatedByCreatedByCriteria) || !$this->lastSystematicReviewRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collSystematicReviewsRelatedByCreatedBy = SystematicReviewPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		}
		$this->lastSystematicReviewRelatedByCreatedByCriteria = $criteria;

		return $this->collSystematicReviewsRelatedByCreatedBy;
	}

	/**
	 * Clears out the collSystematicReviewsRelatedByUpdatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSystematicReviewsRelatedByUpdatedBy()
	 */
	public function clearSystematicReviewsRelatedByUpdatedBy()
	{
		$this->collSystematicReviewsRelatedByUpdatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSystematicReviewsRelatedByUpdatedBy collection (array).
	 *
	 * By default this just sets the collSystematicReviewsRelatedByUpdatedBy collection to an empty array (like clearcollSystematicReviewsRelatedByUpdatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSystematicReviewsRelatedByUpdatedBy()
	{
		$this->collSystematicReviewsRelatedByUpdatedBy = array();
	}

	/**
	 * Gets an array of SystematicReview objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related SystematicReviewsRelatedByUpdatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SystematicReview[]
	 * @throws     PropelException
	 */
	public function getSystematicReviewsRelatedByUpdatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSystematicReviewsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
			   $this->collSystematicReviewsRelatedByUpdatedBy = array();
			} else {

				$criteria->add(SystematicReviewPeer::UPDATED_BY, $this->id);

				SystematicReviewPeer::addSelectColumns($criteria);
				$this->collSystematicReviewsRelatedByUpdatedBy = SystematicReviewPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SystematicReviewPeer::UPDATED_BY, $this->id);

				SystematicReviewPeer::addSelectColumns($criteria);
				if (!isset($this->lastSystematicReviewRelatedByUpdatedByCriteria) || !$this->lastSystematicReviewRelatedByUpdatedByCriteria->equals($criteria)) {
					$this->collSystematicReviewsRelatedByUpdatedBy = SystematicReviewPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSystematicReviewRelatedByUpdatedByCriteria = $criteria;
		return $this->collSystematicReviewsRelatedByUpdatedBy;
	}

	/**
	 * Returns the number of related SystematicReview objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SystematicReview objects.
	 * @throws     PropelException
	 */
	public function countSystematicReviewsRelatedByUpdatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSystematicReviewsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SystematicReviewPeer::UPDATED_BY, $this->id);

				$count = SystematicReviewPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SystematicReviewPeer::UPDATED_BY, $this->id);

				if (!isset($this->lastSystematicReviewRelatedByUpdatedByCriteria) || !$this->lastSystematicReviewRelatedByUpdatedByCriteria->equals($criteria)) {
					$count = SystematicReviewPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSystematicReviewsRelatedByUpdatedBy);
				}
			} else {
				$count = count($this->collSystematicReviewsRelatedByUpdatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SystematicReview object to this object
	 * through the SystematicReview foreign key attribute.
	 *
	 * @param      SystematicReview $l SystematicReview
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSystematicReviewRelatedByUpdatedBy(SystematicReview $l)
	{
		if ($this->collSystematicReviewsRelatedByUpdatedBy === null) {
			$this->initSystematicReviewsRelatedByUpdatedBy();
		}
		if (!in_array($l, $this->collSystematicReviewsRelatedByUpdatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSystematicReviewsRelatedByUpdatedBy, $l);
			$l->setsfGuardUserRelatedByUpdatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related SystematicReviewsRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getSystematicReviewsRelatedByUpdatedByJoinQuestionnaire($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSystematicReviewsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collSystematicReviewsRelatedByUpdatedBy = array();
			} else {

				$criteria->add(SystematicReviewPeer::UPDATED_BY, $this->id);

				$this->collSystematicReviewsRelatedByUpdatedBy = SystematicReviewPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SystematicReviewPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastSystematicReviewRelatedByUpdatedByCriteria) || !$this->lastSystematicReviewRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collSystematicReviewsRelatedByUpdatedBy = SystematicReviewPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		}
		$this->lastSystematicReviewRelatedByUpdatedByCriteria = $criteria;

		return $this->collSystematicReviewsRelatedByUpdatedBy;
	}

	/**
	 * Clears out the collSystematicReviewsRelatedByDeletedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSystematicReviewsRelatedByDeletedBy()
	 */
	public function clearSystematicReviewsRelatedByDeletedBy()
	{
		$this->collSystematicReviewsRelatedByDeletedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSystematicReviewsRelatedByDeletedBy collection (array).
	 *
	 * By default this just sets the collSystematicReviewsRelatedByDeletedBy collection to an empty array (like clearcollSystematicReviewsRelatedByDeletedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSystematicReviewsRelatedByDeletedBy()
	{
		$this->collSystematicReviewsRelatedByDeletedBy = array();
	}

	/**
	 * Gets an array of SystematicReview objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related SystematicReviewsRelatedByDeletedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SystematicReview[]
	 * @throws     PropelException
	 */
	public function getSystematicReviewsRelatedByDeletedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSystematicReviewsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
			   $this->collSystematicReviewsRelatedByDeletedBy = array();
			} else {

				$criteria->add(SystematicReviewPeer::DELETED_BY, $this->id);

				SystematicReviewPeer::addSelectColumns($criteria);
				$this->collSystematicReviewsRelatedByDeletedBy = SystematicReviewPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SystematicReviewPeer::DELETED_BY, $this->id);

				SystematicReviewPeer::addSelectColumns($criteria);
				if (!isset($this->lastSystematicReviewRelatedByDeletedByCriteria) || !$this->lastSystematicReviewRelatedByDeletedByCriteria->equals($criteria)) {
					$this->collSystematicReviewsRelatedByDeletedBy = SystematicReviewPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSystematicReviewRelatedByDeletedByCriteria = $criteria;
		return $this->collSystematicReviewsRelatedByDeletedBy;
	}

	/**
	 * Returns the number of related SystematicReview objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SystematicReview objects.
	 * @throws     PropelException
	 */
	public function countSystematicReviewsRelatedByDeletedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSystematicReviewsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SystematicReviewPeer::DELETED_BY, $this->id);

				$count = SystematicReviewPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SystematicReviewPeer::DELETED_BY, $this->id);

				if (!isset($this->lastSystematicReviewRelatedByDeletedByCriteria) || !$this->lastSystematicReviewRelatedByDeletedByCriteria->equals($criteria)) {
					$count = SystematicReviewPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSystematicReviewsRelatedByDeletedBy);
				}
			} else {
				$count = count($this->collSystematicReviewsRelatedByDeletedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SystematicReview object to this object
	 * through the SystematicReview foreign key attribute.
	 *
	 * @param      SystematicReview $l SystematicReview
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSystematicReviewRelatedByDeletedBy(SystematicReview $l)
	{
		if ($this->collSystematicReviewsRelatedByDeletedBy === null) {
			$this->initSystematicReviewsRelatedByDeletedBy();
		}
		if (!in_array($l, $this->collSystematicReviewsRelatedByDeletedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSystematicReviewsRelatedByDeletedBy, $l);
			$l->setsfGuardUserRelatedByDeletedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related SystematicReviewsRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getSystematicReviewsRelatedByDeletedByJoinQuestionnaire($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSystematicReviewsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collSystematicReviewsRelatedByDeletedBy = array();
			} else {

				$criteria->add(SystematicReviewPeer::DELETED_BY, $this->id);

				$this->collSystematicReviewsRelatedByDeletedBy = SystematicReviewPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SystematicReviewPeer::DELETED_BY, $this->id);

			if (!isset($this->lastSystematicReviewRelatedByDeletedByCriteria) || !$this->lastSystematicReviewRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collSystematicReviewsRelatedByDeletedBy = SystematicReviewPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		}
		$this->lastSystematicReviewRelatedByDeletedByCriteria = $criteria;

		return $this->collSystematicReviewsRelatedByDeletedBy;
	}

	/**
	 * Clears out the collSystematicReviewUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSystematicReviewUsers()
	 */
	public function clearSystematicReviewUsers()
	{
		$this->collSystematicReviewUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSystematicReviewUsers collection (array).
	 *
	 * By default this just sets the collSystematicReviewUsers collection to an empty array (like clearcollSystematicReviewUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSystematicReviewUsers()
	{
		$this->collSystematicReviewUsers = array();
	}

	/**
	 * Gets an array of SystematicReviewUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related SystematicReviewUsers from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SystematicReviewUser[]
	 * @throws     PropelException
	 */
	public function getSystematicReviewUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSystematicReviewUsers === null) {
			if ($this->isNew()) {
			   $this->collSystematicReviewUsers = array();
			} else {

				$criteria->add(SystematicReviewUserPeer::USER_ID, $this->id);

				SystematicReviewUserPeer::addSelectColumns($criteria);
				$this->collSystematicReviewUsers = SystematicReviewUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SystematicReviewUserPeer::USER_ID, $this->id);

				SystematicReviewUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastSystematicReviewUserCriteria) || !$this->lastSystematicReviewUserCriteria->equals($criteria)) {
					$this->collSystematicReviewUsers = SystematicReviewUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSystematicReviewUserCriteria = $criteria;
		return $this->collSystematicReviewUsers;
	}

	/**
	 * Returns the number of related SystematicReviewUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SystematicReviewUser objects.
	 * @throws     PropelException
	 */
	public function countSystematicReviewUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSystematicReviewUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SystematicReviewUserPeer::USER_ID, $this->id);

				$count = SystematicReviewUserPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SystematicReviewUserPeer::USER_ID, $this->id);

				if (!isset($this->lastSystematicReviewUserCriteria) || !$this->lastSystematicReviewUserCriteria->equals($criteria)) {
					$count = SystematicReviewUserPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSystematicReviewUsers);
				}
			} else {
				$count = count($this->collSystematicReviewUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SystematicReviewUser object to this object
	 * through the SystematicReviewUser foreign key attribute.
	 *
	 * @param      SystematicReviewUser $l SystematicReviewUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSystematicReviewUser(SystematicReviewUser $l)
	{
		if ($this->collSystematicReviewUsers === null) {
			$this->initSystematicReviewUsers();
		}
		if (!in_array($l, $this->collSystematicReviewUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSystematicReviewUsers, $l);
			$l->setsfGuardUser($this);
		}
	}

	/**
	 * Clears out the collStudysRelatedByCastingVote collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStudysRelatedByCastingVote()
	 */
	public function clearStudysRelatedByCastingVote()
	{
		$this->collStudysRelatedByCastingVote = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStudysRelatedByCastingVote collection (array).
	 *
	 * By default this just sets the collStudysRelatedByCastingVote collection to an empty array (like clearcollStudysRelatedByCastingVote());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStudysRelatedByCastingVote()
	{
		$this->collStudysRelatedByCastingVote = array();
	}

	/**
	 * Gets an array of Study objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related StudysRelatedByCastingVote from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Study[]
	 * @throws     PropelException
	 */
	public function getStudysRelatedByCastingVote($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByCastingVote === null) {
			if ($this->isNew()) {
			   $this->collStudysRelatedByCastingVote = array();
			} else {

				$criteria->add(StudyPeer::CASTING_VOTE, $this->id);

				StudyPeer::addSelectColumns($criteria);
				$this->collStudysRelatedByCastingVote = StudyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StudyPeer::CASTING_VOTE, $this->id);

				StudyPeer::addSelectColumns($criteria);
				if (!isset($this->lastStudyRelatedByCastingVoteCriteria) || !$this->lastStudyRelatedByCastingVoteCriteria->equals($criteria)) {
					$this->collStudysRelatedByCastingVote = StudyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStudyRelatedByCastingVoteCriteria = $criteria;
		return $this->collStudysRelatedByCastingVote;
	}

	/**
	 * Returns the number of related Study objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Study objects.
	 * @throws     PropelException
	 */
	public function countStudysRelatedByCastingVote(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStudysRelatedByCastingVote === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StudyPeer::CASTING_VOTE, $this->id);

				$count = StudyPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StudyPeer::CASTING_VOTE, $this->id);

				if (!isset($this->lastStudyRelatedByCastingVoteCriteria) || !$this->lastStudyRelatedByCastingVoteCriteria->equals($criteria)) {
					$count = StudyPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collStudysRelatedByCastingVote);
				}
			} else {
				$count = count($this->collStudysRelatedByCastingVote);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Study object to this object
	 * through the Study foreign key attribute.
	 *
	 * @param      Study $l Study
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStudyRelatedByCastingVote(Study $l)
	{
		if ($this->collStudysRelatedByCastingVote === null) {
			$this->initStudysRelatedByCastingVote();
		}
		if (!in_array($l, $this->collStudysRelatedByCastingVote, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStudysRelatedByCastingVote, $l);
			$l->setsfGuardUserRelatedByCastingVote($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related StudysRelatedByCastingVote from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getStudysRelatedByCastingVoteJoinSearchBase($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByCastingVote === null) {
			if ($this->isNew()) {
				$this->collStudysRelatedByCastingVote = array();
			} else {

				$criteria->add(StudyPeer::CASTING_VOTE, $this->id);

				$this->collStudysRelatedByCastingVote = StudyPeer::doSelectJoinSearchBase($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudyPeer::CASTING_VOTE, $this->id);

			if (!isset($this->lastStudyRelatedByCastingVoteCriteria) || !$this->lastStudyRelatedByCastingVoteCriteria->equals($criteria)) {
				$this->collStudysRelatedByCastingVote = StudyPeer::doSelectJoinSearchBase($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudyRelatedByCastingVoteCriteria = $criteria;

		return $this->collStudysRelatedByCastingVote;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related StudysRelatedByCastingVote from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getStudysRelatedByCastingVoteJoinSystematicReview($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByCastingVote === null) {
			if ($this->isNew()) {
				$this->collStudysRelatedByCastingVote = array();
			} else {

				$criteria->add(StudyPeer::CASTING_VOTE, $this->id);

				$this->collStudysRelatedByCastingVote = StudyPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudyPeer::CASTING_VOTE, $this->id);

			if (!isset($this->lastStudyRelatedByCastingVoteCriteria) || !$this->lastStudyRelatedByCastingVoteCriteria->equals($criteria)) {
				$this->collStudysRelatedByCastingVote = StudyPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudyRelatedByCastingVoteCriteria = $criteria;

		return $this->collStudysRelatedByCastingVote;
	}

	/**
	 * Clears out the collStudysRelatedByCreatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStudysRelatedByCreatedBy()
	 */
	public function clearStudysRelatedByCreatedBy()
	{
		$this->collStudysRelatedByCreatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStudysRelatedByCreatedBy collection (array).
	 *
	 * By default this just sets the collStudysRelatedByCreatedBy collection to an empty array (like clearcollStudysRelatedByCreatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStudysRelatedByCreatedBy()
	{
		$this->collStudysRelatedByCreatedBy = array();
	}

	/**
	 * Gets an array of Study objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related StudysRelatedByCreatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Study[]
	 * @throws     PropelException
	 */
	public function getStudysRelatedByCreatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByCreatedBy === null) {
			if ($this->isNew()) {
			   $this->collStudysRelatedByCreatedBy = array();
			} else {

				$criteria->add(StudyPeer::CREATED_BY, $this->id);

				StudyPeer::addSelectColumns($criteria);
				$this->collStudysRelatedByCreatedBy = StudyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StudyPeer::CREATED_BY, $this->id);

				StudyPeer::addSelectColumns($criteria);
				if (!isset($this->lastStudyRelatedByCreatedByCriteria) || !$this->lastStudyRelatedByCreatedByCriteria->equals($criteria)) {
					$this->collStudysRelatedByCreatedBy = StudyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStudyRelatedByCreatedByCriteria = $criteria;
		return $this->collStudysRelatedByCreatedBy;
	}

	/**
	 * Returns the number of related Study objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Study objects.
	 * @throws     PropelException
	 */
	public function countStudysRelatedByCreatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStudysRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StudyPeer::CREATED_BY, $this->id);

				$count = StudyPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StudyPeer::CREATED_BY, $this->id);

				if (!isset($this->lastStudyRelatedByCreatedByCriteria) || !$this->lastStudyRelatedByCreatedByCriteria->equals($criteria)) {
					$count = StudyPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collStudysRelatedByCreatedBy);
				}
			} else {
				$count = count($this->collStudysRelatedByCreatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Study object to this object
	 * through the Study foreign key attribute.
	 *
	 * @param      Study $l Study
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStudyRelatedByCreatedBy(Study $l)
	{
		if ($this->collStudysRelatedByCreatedBy === null) {
			$this->initStudysRelatedByCreatedBy();
		}
		if (!in_array($l, $this->collStudysRelatedByCreatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStudysRelatedByCreatedBy, $l);
			$l->setsfGuardUserRelatedByCreatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related StudysRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getStudysRelatedByCreatedByJoinSearchBase($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collStudysRelatedByCreatedBy = array();
			} else {

				$criteria->add(StudyPeer::CREATED_BY, $this->id);

				$this->collStudysRelatedByCreatedBy = StudyPeer::doSelectJoinSearchBase($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudyPeer::CREATED_BY, $this->id);

			if (!isset($this->lastStudyRelatedByCreatedByCriteria) || !$this->lastStudyRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collStudysRelatedByCreatedBy = StudyPeer::doSelectJoinSearchBase($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudyRelatedByCreatedByCriteria = $criteria;

		return $this->collStudysRelatedByCreatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related StudysRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getStudysRelatedByCreatedByJoinSystematicReview($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collStudysRelatedByCreatedBy = array();
			} else {

				$criteria->add(StudyPeer::CREATED_BY, $this->id);

				$this->collStudysRelatedByCreatedBy = StudyPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudyPeer::CREATED_BY, $this->id);

			if (!isset($this->lastStudyRelatedByCreatedByCriteria) || !$this->lastStudyRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collStudysRelatedByCreatedBy = StudyPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudyRelatedByCreatedByCriteria = $criteria;

		return $this->collStudysRelatedByCreatedBy;
	}

	/**
	 * Clears out the collStudysRelatedByUpdatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStudysRelatedByUpdatedBy()
	 */
	public function clearStudysRelatedByUpdatedBy()
	{
		$this->collStudysRelatedByUpdatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStudysRelatedByUpdatedBy collection (array).
	 *
	 * By default this just sets the collStudysRelatedByUpdatedBy collection to an empty array (like clearcollStudysRelatedByUpdatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStudysRelatedByUpdatedBy()
	{
		$this->collStudysRelatedByUpdatedBy = array();
	}

	/**
	 * Gets an array of Study objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related StudysRelatedByUpdatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Study[]
	 * @throws     PropelException
	 */
	public function getStudysRelatedByUpdatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
			   $this->collStudysRelatedByUpdatedBy = array();
			} else {

				$criteria->add(StudyPeer::UPDATED_BY, $this->id);

				StudyPeer::addSelectColumns($criteria);
				$this->collStudysRelatedByUpdatedBy = StudyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StudyPeer::UPDATED_BY, $this->id);

				StudyPeer::addSelectColumns($criteria);
				if (!isset($this->lastStudyRelatedByUpdatedByCriteria) || !$this->lastStudyRelatedByUpdatedByCriteria->equals($criteria)) {
					$this->collStudysRelatedByUpdatedBy = StudyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStudyRelatedByUpdatedByCriteria = $criteria;
		return $this->collStudysRelatedByUpdatedBy;
	}

	/**
	 * Returns the number of related Study objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Study objects.
	 * @throws     PropelException
	 */
	public function countStudysRelatedByUpdatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStudysRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StudyPeer::UPDATED_BY, $this->id);

				$count = StudyPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StudyPeer::UPDATED_BY, $this->id);

				if (!isset($this->lastStudyRelatedByUpdatedByCriteria) || !$this->lastStudyRelatedByUpdatedByCriteria->equals($criteria)) {
					$count = StudyPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collStudysRelatedByUpdatedBy);
				}
			} else {
				$count = count($this->collStudysRelatedByUpdatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Study object to this object
	 * through the Study foreign key attribute.
	 *
	 * @param      Study $l Study
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStudyRelatedByUpdatedBy(Study $l)
	{
		if ($this->collStudysRelatedByUpdatedBy === null) {
			$this->initStudysRelatedByUpdatedBy();
		}
		if (!in_array($l, $this->collStudysRelatedByUpdatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStudysRelatedByUpdatedBy, $l);
			$l->setsfGuardUserRelatedByUpdatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related StudysRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getStudysRelatedByUpdatedByJoinSearchBase($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collStudysRelatedByUpdatedBy = array();
			} else {

				$criteria->add(StudyPeer::UPDATED_BY, $this->id);

				$this->collStudysRelatedByUpdatedBy = StudyPeer::doSelectJoinSearchBase($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudyPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastStudyRelatedByUpdatedByCriteria) || !$this->lastStudyRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collStudysRelatedByUpdatedBy = StudyPeer::doSelectJoinSearchBase($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudyRelatedByUpdatedByCriteria = $criteria;

		return $this->collStudysRelatedByUpdatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related StudysRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getStudysRelatedByUpdatedByJoinSystematicReview($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collStudysRelatedByUpdatedBy = array();
			} else {

				$criteria->add(StudyPeer::UPDATED_BY, $this->id);

				$this->collStudysRelatedByUpdatedBy = StudyPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudyPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastStudyRelatedByUpdatedByCriteria) || !$this->lastStudyRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collStudysRelatedByUpdatedBy = StudyPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudyRelatedByUpdatedByCriteria = $criteria;

		return $this->collStudysRelatedByUpdatedBy;
	}

	/**
	 * Clears out the collStudysRelatedByDeletedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStudysRelatedByDeletedBy()
	 */
	public function clearStudysRelatedByDeletedBy()
	{
		$this->collStudysRelatedByDeletedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStudysRelatedByDeletedBy collection (array).
	 *
	 * By default this just sets the collStudysRelatedByDeletedBy collection to an empty array (like clearcollStudysRelatedByDeletedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStudysRelatedByDeletedBy()
	{
		$this->collStudysRelatedByDeletedBy = array();
	}

	/**
	 * Gets an array of Study objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related StudysRelatedByDeletedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Study[]
	 * @throws     PropelException
	 */
	public function getStudysRelatedByDeletedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByDeletedBy === null) {
			if ($this->isNew()) {
			   $this->collStudysRelatedByDeletedBy = array();
			} else {

				$criteria->add(StudyPeer::DELETED_BY, $this->id);

				StudyPeer::addSelectColumns($criteria);
				$this->collStudysRelatedByDeletedBy = StudyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StudyPeer::DELETED_BY, $this->id);

				StudyPeer::addSelectColumns($criteria);
				if (!isset($this->lastStudyRelatedByDeletedByCriteria) || !$this->lastStudyRelatedByDeletedByCriteria->equals($criteria)) {
					$this->collStudysRelatedByDeletedBy = StudyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStudyRelatedByDeletedByCriteria = $criteria;
		return $this->collStudysRelatedByDeletedBy;
	}

	/**
	 * Returns the number of related Study objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Study objects.
	 * @throws     PropelException
	 */
	public function countStudysRelatedByDeletedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStudysRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StudyPeer::DELETED_BY, $this->id);

				$count = StudyPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StudyPeer::DELETED_BY, $this->id);

				if (!isset($this->lastStudyRelatedByDeletedByCriteria) || !$this->lastStudyRelatedByDeletedByCriteria->equals($criteria)) {
					$count = StudyPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collStudysRelatedByDeletedBy);
				}
			} else {
				$count = count($this->collStudysRelatedByDeletedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Study object to this object
	 * through the Study foreign key attribute.
	 *
	 * @param      Study $l Study
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStudyRelatedByDeletedBy(Study $l)
	{
		if ($this->collStudysRelatedByDeletedBy === null) {
			$this->initStudysRelatedByDeletedBy();
		}
		if (!in_array($l, $this->collStudysRelatedByDeletedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStudysRelatedByDeletedBy, $l);
			$l->setsfGuardUserRelatedByDeletedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related StudysRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getStudysRelatedByDeletedByJoinSearchBase($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collStudysRelatedByDeletedBy = array();
			} else {

				$criteria->add(StudyPeer::DELETED_BY, $this->id);

				$this->collStudysRelatedByDeletedBy = StudyPeer::doSelectJoinSearchBase($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudyPeer::DELETED_BY, $this->id);

			if (!isset($this->lastStudyRelatedByDeletedByCriteria) || !$this->lastStudyRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collStudysRelatedByDeletedBy = StudyPeer::doSelectJoinSearchBase($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudyRelatedByDeletedByCriteria = $criteria;

		return $this->collStudysRelatedByDeletedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related StudysRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getStudysRelatedByDeletedByJoinSystematicReview($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudysRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collStudysRelatedByDeletedBy = array();
			} else {

				$criteria->add(StudyPeer::DELETED_BY, $this->id);

				$this->collStudysRelatedByDeletedBy = StudyPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudyPeer::DELETED_BY, $this->id);

			if (!isset($this->lastStudyRelatedByDeletedByCriteria) || !$this->lastStudyRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collStudysRelatedByDeletedBy = StudyPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudyRelatedByDeletedByCriteria = $criteria;

		return $this->collStudysRelatedByDeletedBy;
	}

	/**
	 * Clears out the collStudyUserCriterias collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStudyUserCriterias()
	 */
	public function clearStudyUserCriterias()
	{
		$this->collStudyUserCriterias = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStudyUserCriterias collection (array).
	 *
	 * By default this just sets the collStudyUserCriterias collection to an empty array (like clearcollStudyUserCriterias());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStudyUserCriterias()
	{
		$this->collStudyUserCriterias = array();
	}

	/**
	 * Gets an array of StudyUserCriteria objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related StudyUserCriterias from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array StudyUserCriteria[]
	 * @throws     PropelException
	 */
	public function getStudyUserCriterias($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudyUserCriterias === null) {
			if ($this->isNew()) {
			   $this->collStudyUserCriterias = array();
			} else {

				$criteria->add(StudyUserCriteriaPeer::USER_ID, $this->id);

				StudyUserCriteriaPeer::addSelectColumns($criteria);
				$this->collStudyUserCriterias = StudyUserCriteriaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StudyUserCriteriaPeer::USER_ID, $this->id);

				StudyUserCriteriaPeer::addSelectColumns($criteria);
				if (!isset($this->lastStudyUserCriteriaCriteria) || !$this->lastStudyUserCriteriaCriteria->equals($criteria)) {
					$this->collStudyUserCriterias = StudyUserCriteriaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStudyUserCriteriaCriteria = $criteria;
		return $this->collStudyUserCriterias;
	}

	/**
	 * Returns the number of related StudyUserCriteria objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related StudyUserCriteria objects.
	 * @throws     PropelException
	 */
	public function countStudyUserCriterias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStudyUserCriterias === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StudyUserCriteriaPeer::USER_ID, $this->id);

				$count = StudyUserCriteriaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StudyUserCriteriaPeer::USER_ID, $this->id);

				if (!isset($this->lastStudyUserCriteriaCriteria) || !$this->lastStudyUserCriteriaCriteria->equals($criteria)) {
					$count = StudyUserCriteriaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collStudyUserCriterias);
				}
			} else {
				$count = count($this->collStudyUserCriterias);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a StudyUserCriteria object to this object
	 * through the StudyUserCriteria foreign key attribute.
	 *
	 * @param      StudyUserCriteria $l StudyUserCriteria
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStudyUserCriteria(StudyUserCriteria $l)
	{
		if ($this->collStudyUserCriterias === null) {
			$this->initStudyUserCriterias();
		}
		if (!in_array($l, $this->collStudyUserCriterias, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStudyUserCriterias, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related StudyUserCriterias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getStudyUserCriteriasJoinStudy($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudyUserCriterias === null) {
			if ($this->isNew()) {
				$this->collStudyUserCriterias = array();
			} else {

				$criteria->add(StudyUserCriteriaPeer::USER_ID, $this->id);

				$this->collStudyUserCriterias = StudyUserCriteriaPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudyUserCriteriaPeer::USER_ID, $this->id);

			if (!isset($this->lastStudyUserCriteriaCriteria) || !$this->lastStudyUserCriteriaCriteria->equals($criteria)) {
				$this->collStudyUserCriterias = StudyUserCriteriaPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudyUserCriteriaCriteria = $criteria;

		return $this->collStudyUserCriterias;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related StudyUserCriterias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getStudyUserCriteriasJoinRslCriteria($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStudyUserCriterias === null) {
			if ($this->isNew()) {
				$this->collStudyUserCriterias = array();
			} else {

				$criteria->add(StudyUserCriteriaPeer::USER_ID, $this->id);

				$this->collStudyUserCriterias = StudyUserCriteriaPeer::doSelectJoinRslCriteria($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StudyUserCriteriaPeer::USER_ID, $this->id);

			if (!isset($this->lastStudyUserCriteriaCriteria) || !$this->lastStudyUserCriteriaCriteria->equals($criteria)) {
				$this->collStudyUserCriterias = StudyUserCriteriaPeer::doSelectJoinRslCriteria($criteria, $con, $join_behavior);
			}
		}
		$this->lastStudyUserCriteriaCriteria = $criteria;

		return $this->collStudyUserCriterias;
	}

	/**
	 * Clears out the collQuestionnairesRelatedByCreatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addQuestionnairesRelatedByCreatedBy()
	 */
	public function clearQuestionnairesRelatedByCreatedBy()
	{
		$this->collQuestionnairesRelatedByCreatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collQuestionnairesRelatedByCreatedBy collection (array).
	 *
	 * By default this just sets the collQuestionnairesRelatedByCreatedBy collection to an empty array (like clearcollQuestionnairesRelatedByCreatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initQuestionnairesRelatedByCreatedBy()
	{
		$this->collQuestionnairesRelatedByCreatedBy = array();
	}

	/**
	 * Gets an array of Questionnaire objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related QuestionnairesRelatedByCreatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Questionnaire[]
	 * @throws     PropelException
	 */
	public function getQuestionnairesRelatedByCreatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionnairesRelatedByCreatedBy === null) {
			if ($this->isNew()) {
			   $this->collQuestionnairesRelatedByCreatedBy = array();
			} else {

				$criteria->add(QuestionnairePeer::CREATED_BY, $this->id);

				QuestionnairePeer::addSelectColumns($criteria);
				$this->collQuestionnairesRelatedByCreatedBy = QuestionnairePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(QuestionnairePeer::CREATED_BY, $this->id);

				QuestionnairePeer::addSelectColumns($criteria);
				if (!isset($this->lastQuestionnaireRelatedByCreatedByCriteria) || !$this->lastQuestionnaireRelatedByCreatedByCriteria->equals($criteria)) {
					$this->collQuestionnairesRelatedByCreatedBy = QuestionnairePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastQuestionnaireRelatedByCreatedByCriteria = $criteria;
		return $this->collQuestionnairesRelatedByCreatedBy;
	}

	/**
	 * Returns the number of related Questionnaire objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Questionnaire objects.
	 * @throws     PropelException
	 */
	public function countQuestionnairesRelatedByCreatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collQuestionnairesRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(QuestionnairePeer::CREATED_BY, $this->id);

				$count = QuestionnairePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(QuestionnairePeer::CREATED_BY, $this->id);

				if (!isset($this->lastQuestionnaireRelatedByCreatedByCriteria) || !$this->lastQuestionnaireRelatedByCreatedByCriteria->equals($criteria)) {
					$count = QuestionnairePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collQuestionnairesRelatedByCreatedBy);
				}
			} else {
				$count = count($this->collQuestionnairesRelatedByCreatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Questionnaire object to this object
	 * through the Questionnaire foreign key attribute.
	 *
	 * @param      Questionnaire $l Questionnaire
	 * @return     void
	 * @throws     PropelException
	 */
	public function addQuestionnaireRelatedByCreatedBy(Questionnaire $l)
	{
		if ($this->collQuestionnairesRelatedByCreatedBy === null) {
			$this->initQuestionnairesRelatedByCreatedBy();
		}
		if (!in_array($l, $this->collQuestionnairesRelatedByCreatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collQuestionnairesRelatedByCreatedBy, $l);
			$l->setsfGuardUserRelatedByCreatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related QuestionnairesRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getQuestionnairesRelatedByCreatedByJoinSystematicReview($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionnairesRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collQuestionnairesRelatedByCreatedBy = array();
			} else {

				$criteria->add(QuestionnairePeer::CREATED_BY, $this->id);

				$this->collQuestionnairesRelatedByCreatedBy = QuestionnairePeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(QuestionnairePeer::CREATED_BY, $this->id);

			if (!isset($this->lastQuestionnaireRelatedByCreatedByCriteria) || !$this->lastQuestionnaireRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collQuestionnairesRelatedByCreatedBy = QuestionnairePeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		}
		$this->lastQuestionnaireRelatedByCreatedByCriteria = $criteria;

		return $this->collQuestionnairesRelatedByCreatedBy;
	}

	/**
	 * Clears out the collQuestionnairesRelatedByUpdatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addQuestionnairesRelatedByUpdatedBy()
	 */
	public function clearQuestionnairesRelatedByUpdatedBy()
	{
		$this->collQuestionnairesRelatedByUpdatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collQuestionnairesRelatedByUpdatedBy collection (array).
	 *
	 * By default this just sets the collQuestionnairesRelatedByUpdatedBy collection to an empty array (like clearcollQuestionnairesRelatedByUpdatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initQuestionnairesRelatedByUpdatedBy()
	{
		$this->collQuestionnairesRelatedByUpdatedBy = array();
	}

	/**
	 * Gets an array of Questionnaire objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related QuestionnairesRelatedByUpdatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Questionnaire[]
	 * @throws     PropelException
	 */
	public function getQuestionnairesRelatedByUpdatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionnairesRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
			   $this->collQuestionnairesRelatedByUpdatedBy = array();
			} else {

				$criteria->add(QuestionnairePeer::UPDATED_BY, $this->id);

				QuestionnairePeer::addSelectColumns($criteria);
				$this->collQuestionnairesRelatedByUpdatedBy = QuestionnairePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(QuestionnairePeer::UPDATED_BY, $this->id);

				QuestionnairePeer::addSelectColumns($criteria);
				if (!isset($this->lastQuestionnaireRelatedByUpdatedByCriteria) || !$this->lastQuestionnaireRelatedByUpdatedByCriteria->equals($criteria)) {
					$this->collQuestionnairesRelatedByUpdatedBy = QuestionnairePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastQuestionnaireRelatedByUpdatedByCriteria = $criteria;
		return $this->collQuestionnairesRelatedByUpdatedBy;
	}

	/**
	 * Returns the number of related Questionnaire objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Questionnaire objects.
	 * @throws     PropelException
	 */
	public function countQuestionnairesRelatedByUpdatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collQuestionnairesRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(QuestionnairePeer::UPDATED_BY, $this->id);

				$count = QuestionnairePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(QuestionnairePeer::UPDATED_BY, $this->id);

				if (!isset($this->lastQuestionnaireRelatedByUpdatedByCriteria) || !$this->lastQuestionnaireRelatedByUpdatedByCriteria->equals($criteria)) {
					$count = QuestionnairePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collQuestionnairesRelatedByUpdatedBy);
				}
			} else {
				$count = count($this->collQuestionnairesRelatedByUpdatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Questionnaire object to this object
	 * through the Questionnaire foreign key attribute.
	 *
	 * @param      Questionnaire $l Questionnaire
	 * @return     void
	 * @throws     PropelException
	 */
	public function addQuestionnaireRelatedByUpdatedBy(Questionnaire $l)
	{
		if ($this->collQuestionnairesRelatedByUpdatedBy === null) {
			$this->initQuestionnairesRelatedByUpdatedBy();
		}
		if (!in_array($l, $this->collQuestionnairesRelatedByUpdatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collQuestionnairesRelatedByUpdatedBy, $l);
			$l->setsfGuardUserRelatedByUpdatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related QuestionnairesRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getQuestionnairesRelatedByUpdatedByJoinSystematicReview($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionnairesRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collQuestionnairesRelatedByUpdatedBy = array();
			} else {

				$criteria->add(QuestionnairePeer::UPDATED_BY, $this->id);

				$this->collQuestionnairesRelatedByUpdatedBy = QuestionnairePeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(QuestionnairePeer::UPDATED_BY, $this->id);

			if (!isset($this->lastQuestionnaireRelatedByUpdatedByCriteria) || !$this->lastQuestionnaireRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collQuestionnairesRelatedByUpdatedBy = QuestionnairePeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		}
		$this->lastQuestionnaireRelatedByUpdatedByCriteria = $criteria;

		return $this->collQuestionnairesRelatedByUpdatedBy;
	}

	/**
	 * Clears out the collQuestionnairesRelatedByDeletedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addQuestionnairesRelatedByDeletedBy()
	 */
	public function clearQuestionnairesRelatedByDeletedBy()
	{
		$this->collQuestionnairesRelatedByDeletedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collQuestionnairesRelatedByDeletedBy collection (array).
	 *
	 * By default this just sets the collQuestionnairesRelatedByDeletedBy collection to an empty array (like clearcollQuestionnairesRelatedByDeletedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initQuestionnairesRelatedByDeletedBy()
	{
		$this->collQuestionnairesRelatedByDeletedBy = array();
	}

	/**
	 * Gets an array of Questionnaire objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related QuestionnairesRelatedByDeletedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Questionnaire[]
	 * @throws     PropelException
	 */
	public function getQuestionnairesRelatedByDeletedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionnairesRelatedByDeletedBy === null) {
			if ($this->isNew()) {
			   $this->collQuestionnairesRelatedByDeletedBy = array();
			} else {

				$criteria->add(QuestionnairePeer::DELETED_BY, $this->id);

				QuestionnairePeer::addSelectColumns($criteria);
				$this->collQuestionnairesRelatedByDeletedBy = QuestionnairePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(QuestionnairePeer::DELETED_BY, $this->id);

				QuestionnairePeer::addSelectColumns($criteria);
				if (!isset($this->lastQuestionnaireRelatedByDeletedByCriteria) || !$this->lastQuestionnaireRelatedByDeletedByCriteria->equals($criteria)) {
					$this->collQuestionnairesRelatedByDeletedBy = QuestionnairePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastQuestionnaireRelatedByDeletedByCriteria = $criteria;
		return $this->collQuestionnairesRelatedByDeletedBy;
	}

	/**
	 * Returns the number of related Questionnaire objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Questionnaire objects.
	 * @throws     PropelException
	 */
	public function countQuestionnairesRelatedByDeletedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collQuestionnairesRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(QuestionnairePeer::DELETED_BY, $this->id);

				$count = QuestionnairePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(QuestionnairePeer::DELETED_BY, $this->id);

				if (!isset($this->lastQuestionnaireRelatedByDeletedByCriteria) || !$this->lastQuestionnaireRelatedByDeletedByCriteria->equals($criteria)) {
					$count = QuestionnairePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collQuestionnairesRelatedByDeletedBy);
				}
			} else {
				$count = count($this->collQuestionnairesRelatedByDeletedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Questionnaire object to this object
	 * through the Questionnaire foreign key attribute.
	 *
	 * @param      Questionnaire $l Questionnaire
	 * @return     void
	 * @throws     PropelException
	 */
	public function addQuestionnaireRelatedByDeletedBy(Questionnaire $l)
	{
		if ($this->collQuestionnairesRelatedByDeletedBy === null) {
			$this->initQuestionnairesRelatedByDeletedBy();
		}
		if (!in_array($l, $this->collQuestionnairesRelatedByDeletedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collQuestionnairesRelatedByDeletedBy, $l);
			$l->setsfGuardUserRelatedByDeletedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related QuestionnairesRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getQuestionnairesRelatedByDeletedByJoinSystematicReview($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionnairesRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collQuestionnairesRelatedByDeletedBy = array();
			} else {

				$criteria->add(QuestionnairePeer::DELETED_BY, $this->id);

				$this->collQuestionnairesRelatedByDeletedBy = QuestionnairePeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(QuestionnairePeer::DELETED_BY, $this->id);

			if (!isset($this->lastQuestionnaireRelatedByDeletedByCriteria) || !$this->lastQuestionnaireRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collQuestionnairesRelatedByDeletedBy = QuestionnairePeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		}
		$this->lastQuestionnaireRelatedByDeletedByCriteria = $criteria;

		return $this->collQuestionnairesRelatedByDeletedBy;
	}

	/**
	 * Clears out the collQuestionsRelatedByCreatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addQuestionsRelatedByCreatedBy()
	 */
	public function clearQuestionsRelatedByCreatedBy()
	{
		$this->collQuestionsRelatedByCreatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collQuestionsRelatedByCreatedBy collection (array).
	 *
	 * By default this just sets the collQuestionsRelatedByCreatedBy collection to an empty array (like clearcollQuestionsRelatedByCreatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initQuestionsRelatedByCreatedBy()
	{
		$this->collQuestionsRelatedByCreatedBy = array();
	}

	/**
	 * Gets an array of Question objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related QuestionsRelatedByCreatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Question[]
	 * @throws     PropelException
	 */
	public function getQuestionsRelatedByCreatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
			   $this->collQuestionsRelatedByCreatedBy = array();
			} else {

				$criteria->add(QuestionPeer::CREATED_BY, $this->id);

				QuestionPeer::addSelectColumns($criteria);
				$this->collQuestionsRelatedByCreatedBy = QuestionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(QuestionPeer::CREATED_BY, $this->id);

				QuestionPeer::addSelectColumns($criteria);
				if (!isset($this->lastQuestionRelatedByCreatedByCriteria) || !$this->lastQuestionRelatedByCreatedByCriteria->equals($criteria)) {
					$this->collQuestionsRelatedByCreatedBy = QuestionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastQuestionRelatedByCreatedByCriteria = $criteria;
		return $this->collQuestionsRelatedByCreatedBy;
	}

	/**
	 * Returns the number of related Question objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Question objects.
	 * @throws     PropelException
	 */
	public function countQuestionsRelatedByCreatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collQuestionsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(QuestionPeer::CREATED_BY, $this->id);

				$count = QuestionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(QuestionPeer::CREATED_BY, $this->id);

				if (!isset($this->lastQuestionRelatedByCreatedByCriteria) || !$this->lastQuestionRelatedByCreatedByCriteria->equals($criteria)) {
					$count = QuestionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collQuestionsRelatedByCreatedBy);
				}
			} else {
				$count = count($this->collQuestionsRelatedByCreatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Question object to this object
	 * through the Question foreign key attribute.
	 *
	 * @param      Question $l Question
	 * @return     void
	 * @throws     PropelException
	 */
	public function addQuestionRelatedByCreatedBy(Question $l)
	{
		if ($this->collQuestionsRelatedByCreatedBy === null) {
			$this->initQuestionsRelatedByCreatedBy();
		}
		if (!in_array($l, $this->collQuestionsRelatedByCreatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collQuestionsRelatedByCreatedBy, $l);
			$l->setsfGuardUserRelatedByCreatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related QuestionsRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getQuestionsRelatedByCreatedByJoinQuestionnaire($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collQuestionsRelatedByCreatedBy = array();
			} else {

				$criteria->add(QuestionPeer::CREATED_BY, $this->id);

				$this->collQuestionsRelatedByCreatedBy = QuestionPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(QuestionPeer::CREATED_BY, $this->id);

			if (!isset($this->lastQuestionRelatedByCreatedByCriteria) || !$this->lastQuestionRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collQuestionsRelatedByCreatedBy = QuestionPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		}
		$this->lastQuestionRelatedByCreatedByCriteria = $criteria;

		return $this->collQuestionsRelatedByCreatedBy;
	}

	/**
	 * Clears out the collQuestionsRelatedByUpdatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addQuestionsRelatedByUpdatedBy()
	 */
	public function clearQuestionsRelatedByUpdatedBy()
	{
		$this->collQuestionsRelatedByUpdatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collQuestionsRelatedByUpdatedBy collection (array).
	 *
	 * By default this just sets the collQuestionsRelatedByUpdatedBy collection to an empty array (like clearcollQuestionsRelatedByUpdatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initQuestionsRelatedByUpdatedBy()
	{
		$this->collQuestionsRelatedByUpdatedBy = array();
	}

	/**
	 * Gets an array of Question objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related QuestionsRelatedByUpdatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Question[]
	 * @throws     PropelException
	 */
	public function getQuestionsRelatedByUpdatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
			   $this->collQuestionsRelatedByUpdatedBy = array();
			} else {

				$criteria->add(QuestionPeer::UPDATED_BY, $this->id);

				QuestionPeer::addSelectColumns($criteria);
				$this->collQuestionsRelatedByUpdatedBy = QuestionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(QuestionPeer::UPDATED_BY, $this->id);

				QuestionPeer::addSelectColumns($criteria);
				if (!isset($this->lastQuestionRelatedByUpdatedByCriteria) || !$this->lastQuestionRelatedByUpdatedByCriteria->equals($criteria)) {
					$this->collQuestionsRelatedByUpdatedBy = QuestionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastQuestionRelatedByUpdatedByCriteria = $criteria;
		return $this->collQuestionsRelatedByUpdatedBy;
	}

	/**
	 * Returns the number of related Question objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Question objects.
	 * @throws     PropelException
	 */
	public function countQuestionsRelatedByUpdatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collQuestionsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(QuestionPeer::UPDATED_BY, $this->id);

				$count = QuestionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(QuestionPeer::UPDATED_BY, $this->id);

				if (!isset($this->lastQuestionRelatedByUpdatedByCriteria) || !$this->lastQuestionRelatedByUpdatedByCriteria->equals($criteria)) {
					$count = QuestionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collQuestionsRelatedByUpdatedBy);
				}
			} else {
				$count = count($this->collQuestionsRelatedByUpdatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Question object to this object
	 * through the Question foreign key attribute.
	 *
	 * @param      Question $l Question
	 * @return     void
	 * @throws     PropelException
	 */
	public function addQuestionRelatedByUpdatedBy(Question $l)
	{
		if ($this->collQuestionsRelatedByUpdatedBy === null) {
			$this->initQuestionsRelatedByUpdatedBy();
		}
		if (!in_array($l, $this->collQuestionsRelatedByUpdatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collQuestionsRelatedByUpdatedBy, $l);
			$l->setsfGuardUserRelatedByUpdatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related QuestionsRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getQuestionsRelatedByUpdatedByJoinQuestionnaire($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collQuestionsRelatedByUpdatedBy = array();
			} else {

				$criteria->add(QuestionPeer::UPDATED_BY, $this->id);

				$this->collQuestionsRelatedByUpdatedBy = QuestionPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(QuestionPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastQuestionRelatedByUpdatedByCriteria) || !$this->lastQuestionRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collQuestionsRelatedByUpdatedBy = QuestionPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		}
		$this->lastQuestionRelatedByUpdatedByCriteria = $criteria;

		return $this->collQuestionsRelatedByUpdatedBy;
	}

	/**
	 * Clears out the collQuestionsRelatedByDeletedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addQuestionsRelatedByDeletedBy()
	 */
	public function clearQuestionsRelatedByDeletedBy()
	{
		$this->collQuestionsRelatedByDeletedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collQuestionsRelatedByDeletedBy collection (array).
	 *
	 * By default this just sets the collQuestionsRelatedByDeletedBy collection to an empty array (like clearcollQuestionsRelatedByDeletedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initQuestionsRelatedByDeletedBy()
	{
		$this->collQuestionsRelatedByDeletedBy = array();
	}

	/**
	 * Gets an array of Question objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related QuestionsRelatedByDeletedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Question[]
	 * @throws     PropelException
	 */
	public function getQuestionsRelatedByDeletedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
			   $this->collQuestionsRelatedByDeletedBy = array();
			} else {

				$criteria->add(QuestionPeer::DELETED_BY, $this->id);

				QuestionPeer::addSelectColumns($criteria);
				$this->collQuestionsRelatedByDeletedBy = QuestionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(QuestionPeer::DELETED_BY, $this->id);

				QuestionPeer::addSelectColumns($criteria);
				if (!isset($this->lastQuestionRelatedByDeletedByCriteria) || !$this->lastQuestionRelatedByDeletedByCriteria->equals($criteria)) {
					$this->collQuestionsRelatedByDeletedBy = QuestionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastQuestionRelatedByDeletedByCriteria = $criteria;
		return $this->collQuestionsRelatedByDeletedBy;
	}

	/**
	 * Returns the number of related Question objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Question objects.
	 * @throws     PropelException
	 */
	public function countQuestionsRelatedByDeletedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collQuestionsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(QuestionPeer::DELETED_BY, $this->id);

				$count = QuestionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(QuestionPeer::DELETED_BY, $this->id);

				if (!isset($this->lastQuestionRelatedByDeletedByCriteria) || !$this->lastQuestionRelatedByDeletedByCriteria->equals($criteria)) {
					$count = QuestionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collQuestionsRelatedByDeletedBy);
				}
			} else {
				$count = count($this->collQuestionsRelatedByDeletedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Question object to this object
	 * through the Question foreign key attribute.
	 *
	 * @param      Question $l Question
	 * @return     void
	 * @throws     PropelException
	 */
	public function addQuestionRelatedByDeletedBy(Question $l)
	{
		if ($this->collQuestionsRelatedByDeletedBy === null) {
			$this->initQuestionsRelatedByDeletedBy();
		}
		if (!in_array($l, $this->collQuestionsRelatedByDeletedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collQuestionsRelatedByDeletedBy, $l);
			$l->setsfGuardUserRelatedByDeletedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related QuestionsRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getQuestionsRelatedByDeletedByJoinQuestionnaire($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collQuestionsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collQuestionsRelatedByDeletedBy = array();
			} else {

				$criteria->add(QuestionPeer::DELETED_BY, $this->id);

				$this->collQuestionsRelatedByDeletedBy = QuestionPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(QuestionPeer::DELETED_BY, $this->id);

			if (!isset($this->lastQuestionRelatedByDeletedByCriteria) || !$this->lastQuestionRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collQuestionsRelatedByDeletedBy = QuestionPeer::doSelectJoinQuestionnaire($criteria, $con, $join_behavior);
			}
		}
		$this->lastQuestionRelatedByDeletedByCriteria = $criteria;

		return $this->collQuestionsRelatedByDeletedBy;
	}

	/**
	 * Clears out the collAnswersRelatedByCreatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAnswersRelatedByCreatedBy()
	 */
	public function clearAnswersRelatedByCreatedBy()
	{
		$this->collAnswersRelatedByCreatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAnswersRelatedByCreatedBy collection (array).
	 *
	 * By default this just sets the collAnswersRelatedByCreatedBy collection to an empty array (like clearcollAnswersRelatedByCreatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAnswersRelatedByCreatedBy()
	{
		$this->collAnswersRelatedByCreatedBy = array();
	}

	/**
	 * Gets an array of Answer objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related AnswersRelatedByCreatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Answer[]
	 * @throws     PropelException
	 */
	public function getAnswersRelatedByCreatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnswersRelatedByCreatedBy === null) {
			if ($this->isNew()) {
			   $this->collAnswersRelatedByCreatedBy = array();
			} else {

				$criteria->add(AnswerPeer::CREATED_BY, $this->id);

				AnswerPeer::addSelectColumns($criteria);
				$this->collAnswersRelatedByCreatedBy = AnswerPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AnswerPeer::CREATED_BY, $this->id);

				AnswerPeer::addSelectColumns($criteria);
				if (!isset($this->lastAnswerRelatedByCreatedByCriteria) || !$this->lastAnswerRelatedByCreatedByCriteria->equals($criteria)) {
					$this->collAnswersRelatedByCreatedBy = AnswerPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAnswerRelatedByCreatedByCriteria = $criteria;
		return $this->collAnswersRelatedByCreatedBy;
	}

	/**
	 * Returns the number of related Answer objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Answer objects.
	 * @throws     PropelException
	 */
	public function countAnswersRelatedByCreatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAnswersRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AnswerPeer::CREATED_BY, $this->id);

				$count = AnswerPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AnswerPeer::CREATED_BY, $this->id);

				if (!isset($this->lastAnswerRelatedByCreatedByCriteria) || !$this->lastAnswerRelatedByCreatedByCriteria->equals($criteria)) {
					$count = AnswerPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAnswersRelatedByCreatedBy);
				}
			} else {
				$count = count($this->collAnswersRelatedByCreatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Answer object to this object
	 * through the Answer foreign key attribute.
	 *
	 * @param      Answer $l Answer
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAnswerRelatedByCreatedBy(Answer $l)
	{
		if ($this->collAnswersRelatedByCreatedBy === null) {
			$this->initAnswersRelatedByCreatedBy();
		}
		if (!in_array($l, $this->collAnswersRelatedByCreatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAnswersRelatedByCreatedBy, $l);
			$l->setsfGuardUserRelatedByCreatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related AnswersRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getAnswersRelatedByCreatedByJoinQuestion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnswersRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collAnswersRelatedByCreatedBy = array();
			} else {

				$criteria->add(AnswerPeer::CREATED_BY, $this->id);

				$this->collAnswersRelatedByCreatedBy = AnswerPeer::doSelectJoinQuestion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AnswerPeer::CREATED_BY, $this->id);

			if (!isset($this->lastAnswerRelatedByCreatedByCriteria) || !$this->lastAnswerRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collAnswersRelatedByCreatedBy = AnswerPeer::doSelectJoinQuestion($criteria, $con, $join_behavior);
			}
		}
		$this->lastAnswerRelatedByCreatedByCriteria = $criteria;

		return $this->collAnswersRelatedByCreatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related AnswersRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getAnswersRelatedByCreatedByJoinStudy($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnswersRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collAnswersRelatedByCreatedBy = array();
			} else {

				$criteria->add(AnswerPeer::CREATED_BY, $this->id);

				$this->collAnswersRelatedByCreatedBy = AnswerPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AnswerPeer::CREATED_BY, $this->id);

			if (!isset($this->lastAnswerRelatedByCreatedByCriteria) || !$this->lastAnswerRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collAnswersRelatedByCreatedBy = AnswerPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		}
		$this->lastAnswerRelatedByCreatedByCriteria = $criteria;

		return $this->collAnswersRelatedByCreatedBy;
	}

	/**
	 * Clears out the collAnswersRelatedByUpdatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAnswersRelatedByUpdatedBy()
	 */
	public function clearAnswersRelatedByUpdatedBy()
	{
		$this->collAnswersRelatedByUpdatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAnswersRelatedByUpdatedBy collection (array).
	 *
	 * By default this just sets the collAnswersRelatedByUpdatedBy collection to an empty array (like clearcollAnswersRelatedByUpdatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAnswersRelatedByUpdatedBy()
	{
		$this->collAnswersRelatedByUpdatedBy = array();
	}

	/**
	 * Gets an array of Answer objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related AnswersRelatedByUpdatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Answer[]
	 * @throws     PropelException
	 */
	public function getAnswersRelatedByUpdatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnswersRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
			   $this->collAnswersRelatedByUpdatedBy = array();
			} else {

				$criteria->add(AnswerPeer::UPDATED_BY, $this->id);

				AnswerPeer::addSelectColumns($criteria);
				$this->collAnswersRelatedByUpdatedBy = AnswerPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AnswerPeer::UPDATED_BY, $this->id);

				AnswerPeer::addSelectColumns($criteria);
				if (!isset($this->lastAnswerRelatedByUpdatedByCriteria) || !$this->lastAnswerRelatedByUpdatedByCriteria->equals($criteria)) {
					$this->collAnswersRelatedByUpdatedBy = AnswerPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAnswerRelatedByUpdatedByCriteria = $criteria;
		return $this->collAnswersRelatedByUpdatedBy;
	}

	/**
	 * Returns the number of related Answer objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Answer objects.
	 * @throws     PropelException
	 */
	public function countAnswersRelatedByUpdatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAnswersRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AnswerPeer::UPDATED_BY, $this->id);

				$count = AnswerPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AnswerPeer::UPDATED_BY, $this->id);

				if (!isset($this->lastAnswerRelatedByUpdatedByCriteria) || !$this->lastAnswerRelatedByUpdatedByCriteria->equals($criteria)) {
					$count = AnswerPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAnswersRelatedByUpdatedBy);
				}
			} else {
				$count = count($this->collAnswersRelatedByUpdatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Answer object to this object
	 * through the Answer foreign key attribute.
	 *
	 * @param      Answer $l Answer
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAnswerRelatedByUpdatedBy(Answer $l)
	{
		if ($this->collAnswersRelatedByUpdatedBy === null) {
			$this->initAnswersRelatedByUpdatedBy();
		}
		if (!in_array($l, $this->collAnswersRelatedByUpdatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAnswersRelatedByUpdatedBy, $l);
			$l->setsfGuardUserRelatedByUpdatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related AnswersRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getAnswersRelatedByUpdatedByJoinQuestion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnswersRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collAnswersRelatedByUpdatedBy = array();
			} else {

				$criteria->add(AnswerPeer::UPDATED_BY, $this->id);

				$this->collAnswersRelatedByUpdatedBy = AnswerPeer::doSelectJoinQuestion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AnswerPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastAnswerRelatedByUpdatedByCriteria) || !$this->lastAnswerRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collAnswersRelatedByUpdatedBy = AnswerPeer::doSelectJoinQuestion($criteria, $con, $join_behavior);
			}
		}
		$this->lastAnswerRelatedByUpdatedByCriteria = $criteria;

		return $this->collAnswersRelatedByUpdatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related AnswersRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getAnswersRelatedByUpdatedByJoinStudy($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnswersRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collAnswersRelatedByUpdatedBy = array();
			} else {

				$criteria->add(AnswerPeer::UPDATED_BY, $this->id);

				$this->collAnswersRelatedByUpdatedBy = AnswerPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AnswerPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastAnswerRelatedByUpdatedByCriteria) || !$this->lastAnswerRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collAnswersRelatedByUpdatedBy = AnswerPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		}
		$this->lastAnswerRelatedByUpdatedByCriteria = $criteria;

		return $this->collAnswersRelatedByUpdatedBy;
	}

	/**
	 * Clears out the collAnswersRelatedByDeletedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAnswersRelatedByDeletedBy()
	 */
	public function clearAnswersRelatedByDeletedBy()
	{
		$this->collAnswersRelatedByDeletedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAnswersRelatedByDeletedBy collection (array).
	 *
	 * By default this just sets the collAnswersRelatedByDeletedBy collection to an empty array (like clearcollAnswersRelatedByDeletedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAnswersRelatedByDeletedBy()
	{
		$this->collAnswersRelatedByDeletedBy = array();
	}

	/**
	 * Gets an array of Answer objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related AnswersRelatedByDeletedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Answer[]
	 * @throws     PropelException
	 */
	public function getAnswersRelatedByDeletedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnswersRelatedByDeletedBy === null) {
			if ($this->isNew()) {
			   $this->collAnswersRelatedByDeletedBy = array();
			} else {

				$criteria->add(AnswerPeer::DELETED_BY, $this->id);

				AnswerPeer::addSelectColumns($criteria);
				$this->collAnswersRelatedByDeletedBy = AnswerPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AnswerPeer::DELETED_BY, $this->id);

				AnswerPeer::addSelectColumns($criteria);
				if (!isset($this->lastAnswerRelatedByDeletedByCriteria) || !$this->lastAnswerRelatedByDeletedByCriteria->equals($criteria)) {
					$this->collAnswersRelatedByDeletedBy = AnswerPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAnswerRelatedByDeletedByCriteria = $criteria;
		return $this->collAnswersRelatedByDeletedBy;
	}

	/**
	 * Returns the number of related Answer objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Answer objects.
	 * @throws     PropelException
	 */
	public function countAnswersRelatedByDeletedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAnswersRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AnswerPeer::DELETED_BY, $this->id);

				$count = AnswerPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AnswerPeer::DELETED_BY, $this->id);

				if (!isset($this->lastAnswerRelatedByDeletedByCriteria) || !$this->lastAnswerRelatedByDeletedByCriteria->equals($criteria)) {
					$count = AnswerPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAnswersRelatedByDeletedBy);
				}
			} else {
				$count = count($this->collAnswersRelatedByDeletedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Answer object to this object
	 * through the Answer foreign key attribute.
	 *
	 * @param      Answer $l Answer
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAnswerRelatedByDeletedBy(Answer $l)
	{
		if ($this->collAnswersRelatedByDeletedBy === null) {
			$this->initAnswersRelatedByDeletedBy();
		}
		if (!in_array($l, $this->collAnswersRelatedByDeletedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAnswersRelatedByDeletedBy, $l);
			$l->setsfGuardUserRelatedByDeletedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related AnswersRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getAnswersRelatedByDeletedByJoinQuestion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnswersRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collAnswersRelatedByDeletedBy = array();
			} else {

				$criteria->add(AnswerPeer::DELETED_BY, $this->id);

				$this->collAnswersRelatedByDeletedBy = AnswerPeer::doSelectJoinQuestion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AnswerPeer::DELETED_BY, $this->id);

			if (!isset($this->lastAnswerRelatedByDeletedByCriteria) || !$this->lastAnswerRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collAnswersRelatedByDeletedBy = AnswerPeer::doSelectJoinQuestion($criteria, $con, $join_behavior);
			}
		}
		$this->lastAnswerRelatedByDeletedByCriteria = $criteria;

		return $this->collAnswersRelatedByDeletedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related AnswersRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getAnswersRelatedByDeletedByJoinStudy($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAnswersRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collAnswersRelatedByDeletedBy = array();
			} else {

				$criteria->add(AnswerPeer::DELETED_BY, $this->id);

				$this->collAnswersRelatedByDeletedBy = AnswerPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AnswerPeer::DELETED_BY, $this->id);

			if (!isset($this->lastAnswerRelatedByDeletedByCriteria) || !$this->lastAnswerRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collAnswersRelatedByDeletedBy = AnswerPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		}
		$this->lastAnswerRelatedByDeletedByCriteria = $criteria;

		return $this->collAnswersRelatedByDeletedBy;
	}

	/**
	 * Clears out the collRslCriteriasRelatedByCreatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRslCriteriasRelatedByCreatedBy()
	 */
	public function clearRslCriteriasRelatedByCreatedBy()
	{
		$this->collRslCriteriasRelatedByCreatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRslCriteriasRelatedByCreatedBy collection (array).
	 *
	 * By default this just sets the collRslCriteriasRelatedByCreatedBy collection to an empty array (like clearcollRslCriteriasRelatedByCreatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRslCriteriasRelatedByCreatedBy()
	{
		$this->collRslCriteriasRelatedByCreatedBy = array();
	}

	/**
	 * Gets an array of RslCriteria objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related RslCriteriasRelatedByCreatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RslCriteria[]
	 * @throws     PropelException
	 */
	public function getRslCriteriasRelatedByCreatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRslCriteriasRelatedByCreatedBy === null) {
			if ($this->isNew()) {
			   $this->collRslCriteriasRelatedByCreatedBy = array();
			} else {

				$criteria->add(RslCriteriaPeer::CREATED_BY, $this->id);

				RslCriteriaPeer::addSelectColumns($criteria);
				$this->collRslCriteriasRelatedByCreatedBy = RslCriteriaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RslCriteriaPeer::CREATED_BY, $this->id);

				RslCriteriaPeer::addSelectColumns($criteria);
				if (!isset($this->lastRslCriteriaRelatedByCreatedByCriteria) || !$this->lastRslCriteriaRelatedByCreatedByCriteria->equals($criteria)) {
					$this->collRslCriteriasRelatedByCreatedBy = RslCriteriaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRslCriteriaRelatedByCreatedByCriteria = $criteria;
		return $this->collRslCriteriasRelatedByCreatedBy;
	}

	/**
	 * Returns the number of related RslCriteria objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RslCriteria objects.
	 * @throws     PropelException
	 */
	public function countRslCriteriasRelatedByCreatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRslCriteriasRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RslCriteriaPeer::CREATED_BY, $this->id);

				$count = RslCriteriaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RslCriteriaPeer::CREATED_BY, $this->id);

				if (!isset($this->lastRslCriteriaRelatedByCreatedByCriteria) || !$this->lastRslCriteriaRelatedByCreatedByCriteria->equals($criteria)) {
					$count = RslCriteriaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRslCriteriasRelatedByCreatedBy);
				}
			} else {
				$count = count($this->collRslCriteriasRelatedByCreatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RslCriteria object to this object
	 * through the RslCriteria foreign key attribute.
	 *
	 * @param      RslCriteria $l RslCriteria
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRslCriteriaRelatedByCreatedBy(RslCriteria $l)
	{
		if ($this->collRslCriteriasRelatedByCreatedBy === null) {
			$this->initRslCriteriasRelatedByCreatedBy();
		}
		if (!in_array($l, $this->collRslCriteriasRelatedByCreatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRslCriteriasRelatedByCreatedBy, $l);
			$l->setsfGuardUserRelatedByCreatedBy($this);
		}
	}

	/**
	 * Clears out the collRslCriteriasRelatedByUpdatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRslCriteriasRelatedByUpdatedBy()
	 */
	public function clearRslCriteriasRelatedByUpdatedBy()
	{
		$this->collRslCriteriasRelatedByUpdatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRslCriteriasRelatedByUpdatedBy collection (array).
	 *
	 * By default this just sets the collRslCriteriasRelatedByUpdatedBy collection to an empty array (like clearcollRslCriteriasRelatedByUpdatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRslCriteriasRelatedByUpdatedBy()
	{
		$this->collRslCriteriasRelatedByUpdatedBy = array();
	}

	/**
	 * Gets an array of RslCriteria objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related RslCriteriasRelatedByUpdatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RslCriteria[]
	 * @throws     PropelException
	 */
	public function getRslCriteriasRelatedByUpdatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRslCriteriasRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
			   $this->collRslCriteriasRelatedByUpdatedBy = array();
			} else {

				$criteria->add(RslCriteriaPeer::UPDATED_BY, $this->id);

				RslCriteriaPeer::addSelectColumns($criteria);
				$this->collRslCriteriasRelatedByUpdatedBy = RslCriteriaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RslCriteriaPeer::UPDATED_BY, $this->id);

				RslCriteriaPeer::addSelectColumns($criteria);
				if (!isset($this->lastRslCriteriaRelatedByUpdatedByCriteria) || !$this->lastRslCriteriaRelatedByUpdatedByCriteria->equals($criteria)) {
					$this->collRslCriteriasRelatedByUpdatedBy = RslCriteriaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRslCriteriaRelatedByUpdatedByCriteria = $criteria;
		return $this->collRslCriteriasRelatedByUpdatedBy;
	}

	/**
	 * Returns the number of related RslCriteria objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RslCriteria objects.
	 * @throws     PropelException
	 */
	public function countRslCriteriasRelatedByUpdatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRslCriteriasRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RslCriteriaPeer::UPDATED_BY, $this->id);

				$count = RslCriteriaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RslCriteriaPeer::UPDATED_BY, $this->id);

				if (!isset($this->lastRslCriteriaRelatedByUpdatedByCriteria) || !$this->lastRslCriteriaRelatedByUpdatedByCriteria->equals($criteria)) {
					$count = RslCriteriaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRslCriteriasRelatedByUpdatedBy);
				}
			} else {
				$count = count($this->collRslCriteriasRelatedByUpdatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RslCriteria object to this object
	 * through the RslCriteria foreign key attribute.
	 *
	 * @param      RslCriteria $l RslCriteria
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRslCriteriaRelatedByUpdatedBy(RslCriteria $l)
	{
		if ($this->collRslCriteriasRelatedByUpdatedBy === null) {
			$this->initRslCriteriasRelatedByUpdatedBy();
		}
		if (!in_array($l, $this->collRslCriteriasRelatedByUpdatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRslCriteriasRelatedByUpdatedBy, $l);
			$l->setsfGuardUserRelatedByUpdatedBy($this);
		}
	}

	/**
	 * Clears out the collRslCriteriasRelatedByDeletedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRslCriteriasRelatedByDeletedBy()
	 */
	public function clearRslCriteriasRelatedByDeletedBy()
	{
		$this->collRslCriteriasRelatedByDeletedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRslCriteriasRelatedByDeletedBy collection (array).
	 *
	 * By default this just sets the collRslCriteriasRelatedByDeletedBy collection to an empty array (like clearcollRslCriteriasRelatedByDeletedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRslCriteriasRelatedByDeletedBy()
	{
		$this->collRslCriteriasRelatedByDeletedBy = array();
	}

	/**
	 * Gets an array of RslCriteria objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related RslCriteriasRelatedByDeletedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RslCriteria[]
	 * @throws     PropelException
	 */
	public function getRslCriteriasRelatedByDeletedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRslCriteriasRelatedByDeletedBy === null) {
			if ($this->isNew()) {
			   $this->collRslCriteriasRelatedByDeletedBy = array();
			} else {

				$criteria->add(RslCriteriaPeer::DELETED_BY, $this->id);

				RslCriteriaPeer::addSelectColumns($criteria);
				$this->collRslCriteriasRelatedByDeletedBy = RslCriteriaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RslCriteriaPeer::DELETED_BY, $this->id);

				RslCriteriaPeer::addSelectColumns($criteria);
				if (!isset($this->lastRslCriteriaRelatedByDeletedByCriteria) || !$this->lastRslCriteriaRelatedByDeletedByCriteria->equals($criteria)) {
					$this->collRslCriteriasRelatedByDeletedBy = RslCriteriaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRslCriteriaRelatedByDeletedByCriteria = $criteria;
		return $this->collRslCriteriasRelatedByDeletedBy;
	}

	/**
	 * Returns the number of related RslCriteria objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RslCriteria objects.
	 * @throws     PropelException
	 */
	public function countRslCriteriasRelatedByDeletedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRslCriteriasRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RslCriteriaPeer::DELETED_BY, $this->id);

				$count = RslCriteriaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RslCriteriaPeer::DELETED_BY, $this->id);

				if (!isset($this->lastRslCriteriaRelatedByDeletedByCriteria) || !$this->lastRslCriteriaRelatedByDeletedByCriteria->equals($criteria)) {
					$count = RslCriteriaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRslCriteriasRelatedByDeletedBy);
				}
			} else {
				$count = count($this->collRslCriteriasRelatedByDeletedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RslCriteria object to this object
	 * through the RslCriteria foreign key attribute.
	 *
	 * @param      RslCriteria $l RslCriteria
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRslCriteriaRelatedByDeletedBy(RslCriteria $l)
	{
		if ($this->collRslCriteriasRelatedByDeletedBy === null) {
			$this->initRslCriteriasRelatedByDeletedBy();
		}
		if (!in_array($l, $this->collRslCriteriasRelatedByDeletedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRslCriteriasRelatedByDeletedBy, $l);
			$l->setsfGuardUserRelatedByDeletedBy($this);
		}
	}

	/**
	 * Clears out the collRslResultsRelatedByCreatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRslResultsRelatedByCreatedBy()
	 */
	public function clearRslResultsRelatedByCreatedBy()
	{
		$this->collRslResultsRelatedByCreatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRslResultsRelatedByCreatedBy collection (array).
	 *
	 * By default this just sets the collRslResultsRelatedByCreatedBy collection to an empty array (like clearcollRslResultsRelatedByCreatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRslResultsRelatedByCreatedBy()
	{
		$this->collRslResultsRelatedByCreatedBy = array();
	}

	/**
	 * Gets an array of RslResult objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related RslResultsRelatedByCreatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RslResult[]
	 * @throws     PropelException
	 */
	public function getRslResultsRelatedByCreatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRslResultsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
			   $this->collRslResultsRelatedByCreatedBy = array();
			} else {

				$criteria->add(RslResultPeer::CREATED_BY, $this->id);

				RslResultPeer::addSelectColumns($criteria);
				$this->collRslResultsRelatedByCreatedBy = RslResultPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RslResultPeer::CREATED_BY, $this->id);

				RslResultPeer::addSelectColumns($criteria);
				if (!isset($this->lastRslResultRelatedByCreatedByCriteria) || !$this->lastRslResultRelatedByCreatedByCriteria->equals($criteria)) {
					$this->collRslResultsRelatedByCreatedBy = RslResultPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRslResultRelatedByCreatedByCriteria = $criteria;
		return $this->collRslResultsRelatedByCreatedBy;
	}

	/**
	 * Returns the number of related RslResult objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RslResult objects.
	 * @throws     PropelException
	 */
	public function countRslResultsRelatedByCreatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRslResultsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RslResultPeer::CREATED_BY, $this->id);

				$count = RslResultPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RslResultPeer::CREATED_BY, $this->id);

				if (!isset($this->lastRslResultRelatedByCreatedByCriteria) || !$this->lastRslResultRelatedByCreatedByCriteria->equals($criteria)) {
					$count = RslResultPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRslResultsRelatedByCreatedBy);
				}
			} else {
				$count = count($this->collRslResultsRelatedByCreatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RslResult object to this object
	 * through the RslResult foreign key attribute.
	 *
	 * @param      RslResult $l RslResult
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRslResultRelatedByCreatedBy(RslResult $l)
	{
		if ($this->collRslResultsRelatedByCreatedBy === null) {
			$this->initRslResultsRelatedByCreatedBy();
		}
		if (!in_array($l, $this->collRslResultsRelatedByCreatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRslResultsRelatedByCreatedBy, $l);
			$l->setsfGuardUserRelatedByCreatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related RslResultsRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getRslResultsRelatedByCreatedByJoinSystematicReview($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRslResultsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collRslResultsRelatedByCreatedBy = array();
			} else {

				$criteria->add(RslResultPeer::CREATED_BY, $this->id);

				$this->collRslResultsRelatedByCreatedBy = RslResultPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RslResultPeer::CREATED_BY, $this->id);

			if (!isset($this->lastRslResultRelatedByCreatedByCriteria) || !$this->lastRslResultRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collRslResultsRelatedByCreatedBy = RslResultPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		}
		$this->lastRslResultRelatedByCreatedByCriteria = $criteria;

		return $this->collRslResultsRelatedByCreatedBy;
	}

	/**
	 * Clears out the collRslResultsRelatedByUpdatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRslResultsRelatedByUpdatedBy()
	 */
	public function clearRslResultsRelatedByUpdatedBy()
	{
		$this->collRslResultsRelatedByUpdatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRslResultsRelatedByUpdatedBy collection (array).
	 *
	 * By default this just sets the collRslResultsRelatedByUpdatedBy collection to an empty array (like clearcollRslResultsRelatedByUpdatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRslResultsRelatedByUpdatedBy()
	{
		$this->collRslResultsRelatedByUpdatedBy = array();
	}

	/**
	 * Gets an array of RslResult objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related RslResultsRelatedByUpdatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RslResult[]
	 * @throws     PropelException
	 */
	public function getRslResultsRelatedByUpdatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRslResultsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
			   $this->collRslResultsRelatedByUpdatedBy = array();
			} else {

				$criteria->add(RslResultPeer::UPDATED_BY, $this->id);

				RslResultPeer::addSelectColumns($criteria);
				$this->collRslResultsRelatedByUpdatedBy = RslResultPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RslResultPeer::UPDATED_BY, $this->id);

				RslResultPeer::addSelectColumns($criteria);
				if (!isset($this->lastRslResultRelatedByUpdatedByCriteria) || !$this->lastRslResultRelatedByUpdatedByCriteria->equals($criteria)) {
					$this->collRslResultsRelatedByUpdatedBy = RslResultPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRslResultRelatedByUpdatedByCriteria = $criteria;
		return $this->collRslResultsRelatedByUpdatedBy;
	}

	/**
	 * Returns the number of related RslResult objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RslResult objects.
	 * @throws     PropelException
	 */
	public function countRslResultsRelatedByUpdatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRslResultsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RslResultPeer::UPDATED_BY, $this->id);

				$count = RslResultPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RslResultPeer::UPDATED_BY, $this->id);

				if (!isset($this->lastRslResultRelatedByUpdatedByCriteria) || !$this->lastRslResultRelatedByUpdatedByCriteria->equals($criteria)) {
					$count = RslResultPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRslResultsRelatedByUpdatedBy);
				}
			} else {
				$count = count($this->collRslResultsRelatedByUpdatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RslResult object to this object
	 * through the RslResult foreign key attribute.
	 *
	 * @param      RslResult $l RslResult
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRslResultRelatedByUpdatedBy(RslResult $l)
	{
		if ($this->collRslResultsRelatedByUpdatedBy === null) {
			$this->initRslResultsRelatedByUpdatedBy();
		}
		if (!in_array($l, $this->collRslResultsRelatedByUpdatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRslResultsRelatedByUpdatedBy, $l);
			$l->setsfGuardUserRelatedByUpdatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related RslResultsRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getRslResultsRelatedByUpdatedByJoinSystematicReview($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRslResultsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collRslResultsRelatedByUpdatedBy = array();
			} else {

				$criteria->add(RslResultPeer::UPDATED_BY, $this->id);

				$this->collRslResultsRelatedByUpdatedBy = RslResultPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RslResultPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastRslResultRelatedByUpdatedByCriteria) || !$this->lastRslResultRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collRslResultsRelatedByUpdatedBy = RslResultPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		}
		$this->lastRslResultRelatedByUpdatedByCriteria = $criteria;

		return $this->collRslResultsRelatedByUpdatedBy;
	}

	/**
	 * Clears out the collRslResultsRelatedByDeletedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRslResultsRelatedByDeletedBy()
	 */
	public function clearRslResultsRelatedByDeletedBy()
	{
		$this->collRslResultsRelatedByDeletedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRslResultsRelatedByDeletedBy collection (array).
	 *
	 * By default this just sets the collRslResultsRelatedByDeletedBy collection to an empty array (like clearcollRslResultsRelatedByDeletedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRslResultsRelatedByDeletedBy()
	{
		$this->collRslResultsRelatedByDeletedBy = array();
	}

	/**
	 * Gets an array of RslResult objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related RslResultsRelatedByDeletedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RslResult[]
	 * @throws     PropelException
	 */
	public function getRslResultsRelatedByDeletedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRslResultsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
			   $this->collRslResultsRelatedByDeletedBy = array();
			} else {

				$criteria->add(RslResultPeer::DELETED_BY, $this->id);

				RslResultPeer::addSelectColumns($criteria);
				$this->collRslResultsRelatedByDeletedBy = RslResultPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RslResultPeer::DELETED_BY, $this->id);

				RslResultPeer::addSelectColumns($criteria);
				if (!isset($this->lastRslResultRelatedByDeletedByCriteria) || !$this->lastRslResultRelatedByDeletedByCriteria->equals($criteria)) {
					$this->collRslResultsRelatedByDeletedBy = RslResultPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRslResultRelatedByDeletedByCriteria = $criteria;
		return $this->collRslResultsRelatedByDeletedBy;
	}

	/**
	 * Returns the number of related RslResult objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RslResult objects.
	 * @throws     PropelException
	 */
	public function countRslResultsRelatedByDeletedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRslResultsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RslResultPeer::DELETED_BY, $this->id);

				$count = RslResultPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RslResultPeer::DELETED_BY, $this->id);

				if (!isset($this->lastRslResultRelatedByDeletedByCriteria) || !$this->lastRslResultRelatedByDeletedByCriteria->equals($criteria)) {
					$count = RslResultPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRslResultsRelatedByDeletedBy);
				}
			} else {
				$count = count($this->collRslResultsRelatedByDeletedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RslResult object to this object
	 * through the RslResult foreign key attribute.
	 *
	 * @param      RslResult $l RslResult
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRslResultRelatedByDeletedBy(RslResult $l)
	{
		if ($this->collRslResultsRelatedByDeletedBy === null) {
			$this->initRslResultsRelatedByDeletedBy();
		}
		if (!in_array($l, $this->collRslResultsRelatedByDeletedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRslResultsRelatedByDeletedBy, $l);
			$l->setsfGuardUserRelatedByDeletedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related RslResultsRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getRslResultsRelatedByDeletedByJoinSystematicReview($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRslResultsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collRslResultsRelatedByDeletedBy = array();
			} else {

				$criteria->add(RslResultPeer::DELETED_BY, $this->id);

				$this->collRslResultsRelatedByDeletedBy = RslResultPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RslResultPeer::DELETED_BY, $this->id);

			if (!isset($this->lastRslResultRelatedByDeletedByCriteria) || !$this->lastRslResultRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collRslResultsRelatedByDeletedBy = RslResultPeer::doSelectJoinSystematicReview($criteria, $con, $join_behavior);
			}
		}
		$this->lastRslResultRelatedByDeletedByCriteria = $criteria;

		return $this->collRslResultsRelatedByDeletedBy;
	}

	/**
	 * Clears out the collJobsRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJobsRelatedByUserId()
	 */
	public function clearJobsRelatedByUserId()
	{
		$this->collJobsRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJobsRelatedByUserId collection (array).
	 *
	 * By default this just sets the collJobsRelatedByUserId collection to an empty array (like clearcollJobsRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJobsRelatedByUserId()
	{
		$this->collJobsRelatedByUserId = array();
	}

	/**
	 * Gets an array of Job objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related JobsRelatedByUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Job[]
	 * @throws     PropelException
	 */
	public function getJobsRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobsRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collJobsRelatedByUserId = array();
			} else {

				$criteria->add(JobPeer::USER_ID, $this->id);

				JobPeer::addSelectColumns($criteria);
				$this->collJobsRelatedByUserId = JobPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(JobPeer::USER_ID, $this->id);

				JobPeer::addSelectColumns($criteria);
				if (!isset($this->lastJobRelatedByUserIdCriteria) || !$this->lastJobRelatedByUserIdCriteria->equals($criteria)) {
					$this->collJobsRelatedByUserId = JobPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJobRelatedByUserIdCriteria = $criteria;
		return $this->collJobsRelatedByUserId;
	}

	/**
	 * Returns the number of related Job objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Job objects.
	 * @throws     PropelException
	 */
	public function countJobsRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJobsRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(JobPeer::USER_ID, $this->id);

				$count = JobPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(JobPeer::USER_ID, $this->id);

				if (!isset($this->lastJobRelatedByUserIdCriteria) || !$this->lastJobRelatedByUserIdCriteria->equals($criteria)) {
					$count = JobPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collJobsRelatedByUserId);
				}
			} else {
				$count = count($this->collJobsRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Job object to this object
	 * through the Job foreign key attribute.
	 *
	 * @param      Job $l Job
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJobRelatedByUserId(Job $l)
	{
		if ($this->collJobsRelatedByUserId === null) {
			$this->initJobsRelatedByUserId();
		}
		if (!in_array($l, $this->collJobsRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJobsRelatedByUserId, $l);
			$l->setsfGuardUserRelatedByUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related JobsRelatedByUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getJobsRelatedByUserIdJoinActivity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobsRelatedByUserId === null) {
			if ($this->isNew()) {
				$this->collJobsRelatedByUserId = array();
			} else {

				$criteria->add(JobPeer::USER_ID, $this->id);

				$this->collJobsRelatedByUserId = JobPeer::doSelectJoinActivity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobPeer::USER_ID, $this->id);

			if (!isset($this->lastJobRelatedByUserIdCriteria) || !$this->lastJobRelatedByUserIdCriteria->equals($criteria)) {
				$this->collJobsRelatedByUserId = JobPeer::doSelectJoinActivity($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobRelatedByUserIdCriteria = $criteria;

		return $this->collJobsRelatedByUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related JobsRelatedByUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getJobsRelatedByUserIdJoinProtocol($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobsRelatedByUserId === null) {
			if ($this->isNew()) {
				$this->collJobsRelatedByUserId = array();
			} else {

				$criteria->add(JobPeer::USER_ID, $this->id);

				$this->collJobsRelatedByUserId = JobPeer::doSelectJoinProtocol($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobPeer::USER_ID, $this->id);

			if (!isset($this->lastJobRelatedByUserIdCriteria) || !$this->lastJobRelatedByUserIdCriteria->equals($criteria)) {
				$this->collJobsRelatedByUserId = JobPeer::doSelectJoinProtocol($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobRelatedByUserIdCriteria = $criteria;

		return $this->collJobsRelatedByUserId;
	}

	/**
	 * Clears out the collJobsRelatedByFinishedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJobsRelatedByFinishedBy()
	 */
	public function clearJobsRelatedByFinishedBy()
	{
		$this->collJobsRelatedByFinishedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJobsRelatedByFinishedBy collection (array).
	 *
	 * By default this just sets the collJobsRelatedByFinishedBy collection to an empty array (like clearcollJobsRelatedByFinishedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJobsRelatedByFinishedBy()
	{
		$this->collJobsRelatedByFinishedBy = array();
	}

	/**
	 * Gets an array of Job objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related JobsRelatedByFinishedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Job[]
	 * @throws     PropelException
	 */
	public function getJobsRelatedByFinishedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobsRelatedByFinishedBy === null) {
			if ($this->isNew()) {
			   $this->collJobsRelatedByFinishedBy = array();
			} else {

				$criteria->add(JobPeer::FINISHED_BY, $this->id);

				JobPeer::addSelectColumns($criteria);
				$this->collJobsRelatedByFinishedBy = JobPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(JobPeer::FINISHED_BY, $this->id);

				JobPeer::addSelectColumns($criteria);
				if (!isset($this->lastJobRelatedByFinishedByCriteria) || !$this->lastJobRelatedByFinishedByCriteria->equals($criteria)) {
					$this->collJobsRelatedByFinishedBy = JobPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJobRelatedByFinishedByCriteria = $criteria;
		return $this->collJobsRelatedByFinishedBy;
	}

	/**
	 * Returns the number of related Job objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Job objects.
	 * @throws     PropelException
	 */
	public function countJobsRelatedByFinishedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJobsRelatedByFinishedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(JobPeer::FINISHED_BY, $this->id);

				$count = JobPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(JobPeer::FINISHED_BY, $this->id);

				if (!isset($this->lastJobRelatedByFinishedByCriteria) || !$this->lastJobRelatedByFinishedByCriteria->equals($criteria)) {
					$count = JobPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collJobsRelatedByFinishedBy);
				}
			} else {
				$count = count($this->collJobsRelatedByFinishedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Job object to this object
	 * through the Job foreign key attribute.
	 *
	 * @param      Job $l Job
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJobRelatedByFinishedBy(Job $l)
	{
		if ($this->collJobsRelatedByFinishedBy === null) {
			$this->initJobsRelatedByFinishedBy();
		}
		if (!in_array($l, $this->collJobsRelatedByFinishedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJobsRelatedByFinishedBy, $l);
			$l->setsfGuardUserRelatedByFinishedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related JobsRelatedByFinishedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getJobsRelatedByFinishedByJoinActivity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobsRelatedByFinishedBy === null) {
			if ($this->isNew()) {
				$this->collJobsRelatedByFinishedBy = array();
			} else {

				$criteria->add(JobPeer::FINISHED_BY, $this->id);

				$this->collJobsRelatedByFinishedBy = JobPeer::doSelectJoinActivity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobPeer::FINISHED_BY, $this->id);

			if (!isset($this->lastJobRelatedByFinishedByCriteria) || !$this->lastJobRelatedByFinishedByCriteria->equals($criteria)) {
				$this->collJobsRelatedByFinishedBy = JobPeer::doSelectJoinActivity($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobRelatedByFinishedByCriteria = $criteria;

		return $this->collJobsRelatedByFinishedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related JobsRelatedByFinishedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getJobsRelatedByFinishedByJoinProtocol($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobsRelatedByFinishedBy === null) {
			if ($this->isNew()) {
				$this->collJobsRelatedByFinishedBy = array();
			} else {

				$criteria->add(JobPeer::FINISHED_BY, $this->id);

				$this->collJobsRelatedByFinishedBy = JobPeer::doSelectJoinProtocol($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobPeer::FINISHED_BY, $this->id);

			if (!isset($this->lastJobRelatedByFinishedByCriteria) || !$this->lastJobRelatedByFinishedByCriteria->equals($criteria)) {
				$this->collJobsRelatedByFinishedBy = JobPeer::doSelectJoinProtocol($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobRelatedByFinishedByCriteria = $criteria;

		return $this->collJobsRelatedByFinishedBy;
	}

	/**
	 * Clears out the collDataExtractionsRelatedByCreatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDataExtractionsRelatedByCreatedBy()
	 */
	public function clearDataExtractionsRelatedByCreatedBy()
	{
		$this->collDataExtractionsRelatedByCreatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDataExtractionsRelatedByCreatedBy collection (array).
	 *
	 * By default this just sets the collDataExtractionsRelatedByCreatedBy collection to an empty array (like clearcollDataExtractionsRelatedByCreatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDataExtractionsRelatedByCreatedBy()
	{
		$this->collDataExtractionsRelatedByCreatedBy = array();
	}

	/**
	 * Gets an array of DataExtraction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DataExtractionsRelatedByCreatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DataExtraction[]
	 * @throws     PropelException
	 */
	public function getDataExtractionsRelatedByCreatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataExtractionsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
			   $this->collDataExtractionsRelatedByCreatedBy = array();
			} else {

				$criteria->add(DataExtractionPeer::CREATED_BY, $this->id);

				DataExtractionPeer::addSelectColumns($criteria);
				$this->collDataExtractionsRelatedByCreatedBy = DataExtractionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DataExtractionPeer::CREATED_BY, $this->id);

				DataExtractionPeer::addSelectColumns($criteria);
				if (!isset($this->lastDataExtractionRelatedByCreatedByCriteria) || !$this->lastDataExtractionRelatedByCreatedByCriteria->equals($criteria)) {
					$this->collDataExtractionsRelatedByCreatedBy = DataExtractionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDataExtractionRelatedByCreatedByCriteria = $criteria;
		return $this->collDataExtractionsRelatedByCreatedBy;
	}

	/**
	 * Returns the number of related DataExtraction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DataExtraction objects.
	 * @throws     PropelException
	 */
	public function countDataExtractionsRelatedByCreatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDataExtractionsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DataExtractionPeer::CREATED_BY, $this->id);

				$count = DataExtractionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DataExtractionPeer::CREATED_BY, $this->id);

				if (!isset($this->lastDataExtractionRelatedByCreatedByCriteria) || !$this->lastDataExtractionRelatedByCreatedByCriteria->equals($criteria)) {
					$count = DataExtractionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDataExtractionsRelatedByCreatedBy);
				}
			} else {
				$count = count($this->collDataExtractionsRelatedByCreatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DataExtraction object to this object
	 * through the DataExtraction foreign key attribute.
	 *
	 * @param      DataExtraction $l DataExtraction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDataExtractionRelatedByCreatedBy(DataExtraction $l)
	{
		if ($this->collDataExtractionsRelatedByCreatedBy === null) {
			$this->initDataExtractionsRelatedByCreatedBy();
		}
		if (!in_array($l, $this->collDataExtractionsRelatedByCreatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDataExtractionsRelatedByCreatedBy, $l);
			$l->setsfGuardUserRelatedByCreatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DataExtractionsRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDataExtractionsRelatedByCreatedByJoinMetadata($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataExtractionsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collDataExtractionsRelatedByCreatedBy = array();
			} else {

				$criteria->add(DataExtractionPeer::CREATED_BY, $this->id);

				$this->collDataExtractionsRelatedByCreatedBy = DataExtractionPeer::doSelectJoinMetadata($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DataExtractionPeer::CREATED_BY, $this->id);

			if (!isset($this->lastDataExtractionRelatedByCreatedByCriteria) || !$this->lastDataExtractionRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collDataExtractionsRelatedByCreatedBy = DataExtractionPeer::doSelectJoinMetadata($criteria, $con, $join_behavior);
			}
		}
		$this->lastDataExtractionRelatedByCreatedByCriteria = $criteria;

		return $this->collDataExtractionsRelatedByCreatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DataExtractionsRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDataExtractionsRelatedByCreatedByJoinStudy($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataExtractionsRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collDataExtractionsRelatedByCreatedBy = array();
			} else {

				$criteria->add(DataExtractionPeer::CREATED_BY, $this->id);

				$this->collDataExtractionsRelatedByCreatedBy = DataExtractionPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DataExtractionPeer::CREATED_BY, $this->id);

			if (!isset($this->lastDataExtractionRelatedByCreatedByCriteria) || !$this->lastDataExtractionRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collDataExtractionsRelatedByCreatedBy = DataExtractionPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		}
		$this->lastDataExtractionRelatedByCreatedByCriteria = $criteria;

		return $this->collDataExtractionsRelatedByCreatedBy;
	}

	/**
	 * Clears out the collDataExtractionsRelatedByUpdatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDataExtractionsRelatedByUpdatedBy()
	 */
	public function clearDataExtractionsRelatedByUpdatedBy()
	{
		$this->collDataExtractionsRelatedByUpdatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDataExtractionsRelatedByUpdatedBy collection (array).
	 *
	 * By default this just sets the collDataExtractionsRelatedByUpdatedBy collection to an empty array (like clearcollDataExtractionsRelatedByUpdatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDataExtractionsRelatedByUpdatedBy()
	{
		$this->collDataExtractionsRelatedByUpdatedBy = array();
	}

	/**
	 * Gets an array of DataExtraction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DataExtractionsRelatedByUpdatedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DataExtraction[]
	 * @throws     PropelException
	 */
	public function getDataExtractionsRelatedByUpdatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataExtractionsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
			   $this->collDataExtractionsRelatedByUpdatedBy = array();
			} else {

				$criteria->add(DataExtractionPeer::UPDATED_BY, $this->id);

				DataExtractionPeer::addSelectColumns($criteria);
				$this->collDataExtractionsRelatedByUpdatedBy = DataExtractionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DataExtractionPeer::UPDATED_BY, $this->id);

				DataExtractionPeer::addSelectColumns($criteria);
				if (!isset($this->lastDataExtractionRelatedByUpdatedByCriteria) || !$this->lastDataExtractionRelatedByUpdatedByCriteria->equals($criteria)) {
					$this->collDataExtractionsRelatedByUpdatedBy = DataExtractionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDataExtractionRelatedByUpdatedByCriteria = $criteria;
		return $this->collDataExtractionsRelatedByUpdatedBy;
	}

	/**
	 * Returns the number of related DataExtraction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DataExtraction objects.
	 * @throws     PropelException
	 */
	public function countDataExtractionsRelatedByUpdatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDataExtractionsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DataExtractionPeer::UPDATED_BY, $this->id);

				$count = DataExtractionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DataExtractionPeer::UPDATED_BY, $this->id);

				if (!isset($this->lastDataExtractionRelatedByUpdatedByCriteria) || !$this->lastDataExtractionRelatedByUpdatedByCriteria->equals($criteria)) {
					$count = DataExtractionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDataExtractionsRelatedByUpdatedBy);
				}
			} else {
				$count = count($this->collDataExtractionsRelatedByUpdatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DataExtraction object to this object
	 * through the DataExtraction foreign key attribute.
	 *
	 * @param      DataExtraction $l DataExtraction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDataExtractionRelatedByUpdatedBy(DataExtraction $l)
	{
		if ($this->collDataExtractionsRelatedByUpdatedBy === null) {
			$this->initDataExtractionsRelatedByUpdatedBy();
		}
		if (!in_array($l, $this->collDataExtractionsRelatedByUpdatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDataExtractionsRelatedByUpdatedBy, $l);
			$l->setsfGuardUserRelatedByUpdatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DataExtractionsRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDataExtractionsRelatedByUpdatedByJoinMetadata($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataExtractionsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collDataExtractionsRelatedByUpdatedBy = array();
			} else {

				$criteria->add(DataExtractionPeer::UPDATED_BY, $this->id);

				$this->collDataExtractionsRelatedByUpdatedBy = DataExtractionPeer::doSelectJoinMetadata($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DataExtractionPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastDataExtractionRelatedByUpdatedByCriteria) || !$this->lastDataExtractionRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collDataExtractionsRelatedByUpdatedBy = DataExtractionPeer::doSelectJoinMetadata($criteria, $con, $join_behavior);
			}
		}
		$this->lastDataExtractionRelatedByUpdatedByCriteria = $criteria;

		return $this->collDataExtractionsRelatedByUpdatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DataExtractionsRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDataExtractionsRelatedByUpdatedByJoinStudy($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataExtractionsRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collDataExtractionsRelatedByUpdatedBy = array();
			} else {

				$criteria->add(DataExtractionPeer::UPDATED_BY, $this->id);

				$this->collDataExtractionsRelatedByUpdatedBy = DataExtractionPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DataExtractionPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastDataExtractionRelatedByUpdatedByCriteria) || !$this->lastDataExtractionRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collDataExtractionsRelatedByUpdatedBy = DataExtractionPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		}
		$this->lastDataExtractionRelatedByUpdatedByCriteria = $criteria;

		return $this->collDataExtractionsRelatedByUpdatedBy;
	}

	/**
	 * Clears out the collDataExtractionsRelatedByDeletedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDataExtractionsRelatedByDeletedBy()
	 */
	public function clearDataExtractionsRelatedByDeletedBy()
	{
		$this->collDataExtractionsRelatedByDeletedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDataExtractionsRelatedByDeletedBy collection (array).
	 *
	 * By default this just sets the collDataExtractionsRelatedByDeletedBy collection to an empty array (like clearcollDataExtractionsRelatedByDeletedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDataExtractionsRelatedByDeletedBy()
	{
		$this->collDataExtractionsRelatedByDeletedBy = array();
	}

	/**
	 * Gets an array of DataExtraction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DataExtractionsRelatedByDeletedBy from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DataExtraction[]
	 * @throws     PropelException
	 */
	public function getDataExtractionsRelatedByDeletedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataExtractionsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
			   $this->collDataExtractionsRelatedByDeletedBy = array();
			} else {

				$criteria->add(DataExtractionPeer::DELETED_BY, $this->id);

				DataExtractionPeer::addSelectColumns($criteria);
				$this->collDataExtractionsRelatedByDeletedBy = DataExtractionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DataExtractionPeer::DELETED_BY, $this->id);

				DataExtractionPeer::addSelectColumns($criteria);
				if (!isset($this->lastDataExtractionRelatedByDeletedByCriteria) || !$this->lastDataExtractionRelatedByDeletedByCriteria->equals($criteria)) {
					$this->collDataExtractionsRelatedByDeletedBy = DataExtractionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDataExtractionRelatedByDeletedByCriteria = $criteria;
		return $this->collDataExtractionsRelatedByDeletedBy;
	}

	/**
	 * Returns the number of related DataExtraction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DataExtraction objects.
	 * @throws     PropelException
	 */
	public function countDataExtractionsRelatedByDeletedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDataExtractionsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DataExtractionPeer::DELETED_BY, $this->id);

				$count = DataExtractionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DataExtractionPeer::DELETED_BY, $this->id);

				if (!isset($this->lastDataExtractionRelatedByDeletedByCriteria) || !$this->lastDataExtractionRelatedByDeletedByCriteria->equals($criteria)) {
					$count = DataExtractionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDataExtractionsRelatedByDeletedBy);
				}
			} else {
				$count = count($this->collDataExtractionsRelatedByDeletedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DataExtraction object to this object
	 * through the DataExtraction foreign key attribute.
	 *
	 * @param      DataExtraction $l DataExtraction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDataExtractionRelatedByDeletedBy(DataExtraction $l)
	{
		if ($this->collDataExtractionsRelatedByDeletedBy === null) {
			$this->initDataExtractionsRelatedByDeletedBy();
		}
		if (!in_array($l, $this->collDataExtractionsRelatedByDeletedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDataExtractionsRelatedByDeletedBy, $l);
			$l->setsfGuardUserRelatedByDeletedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DataExtractionsRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDataExtractionsRelatedByDeletedByJoinMetadata($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataExtractionsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collDataExtractionsRelatedByDeletedBy = array();
			} else {

				$criteria->add(DataExtractionPeer::DELETED_BY, $this->id);

				$this->collDataExtractionsRelatedByDeletedBy = DataExtractionPeer::doSelectJoinMetadata($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DataExtractionPeer::DELETED_BY, $this->id);

			if (!isset($this->lastDataExtractionRelatedByDeletedByCriteria) || !$this->lastDataExtractionRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collDataExtractionsRelatedByDeletedBy = DataExtractionPeer::doSelectJoinMetadata($criteria, $con, $join_behavior);
			}
		}
		$this->lastDataExtractionRelatedByDeletedByCriteria = $criteria;

		return $this->collDataExtractionsRelatedByDeletedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DataExtractionsRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDataExtractionsRelatedByDeletedByJoinStudy($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDataExtractionsRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collDataExtractionsRelatedByDeletedBy = array();
			} else {

				$criteria->add(DataExtractionPeer::DELETED_BY, $this->id);

				$this->collDataExtractionsRelatedByDeletedBy = DataExtractionPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DataExtractionPeer::DELETED_BY, $this->id);

			if (!isset($this->lastDataExtractionRelatedByDeletedByCriteria) || !$this->lastDataExtractionRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collDataExtractionsRelatedByDeletedBy = DataExtractionPeer::doSelectJoinStudy($criteria, $con, $join_behavior);
			}
		}
		$this->lastDataExtractionRelatedByDeletedByCriteria = $criteria;

		return $this->collDataExtractionsRelatedByDeletedBy;
	}

	/**
	 * Clears out the collAccessTokens collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAccessTokens()
	 */
	public function clearAccessTokens()
	{
		$this->collAccessTokens = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAccessTokens collection (array).
	 *
	 * By default this just sets the collAccessTokens collection to an empty array (like clearcollAccessTokens());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAccessTokens()
	{
		$this->collAccessTokens = array();
	}

	/**
	 * Gets an array of AccessToken objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related AccessTokens from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AccessToken[]
	 * @throws     PropelException
	 */
	public function getAccessTokens($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAccessTokens === null) {
			if ($this->isNew()) {
			   $this->collAccessTokens = array();
			} else {

				$criteria->add(AccessTokenPeer::USER_ID, $this->id);

				AccessTokenPeer::addSelectColumns($criteria);
				$this->collAccessTokens = AccessTokenPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AccessTokenPeer::USER_ID, $this->id);

				AccessTokenPeer::addSelectColumns($criteria);
				if (!isset($this->lastAccessTokenCriteria) || !$this->lastAccessTokenCriteria->equals($criteria)) {
					$this->collAccessTokens = AccessTokenPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAccessTokenCriteria = $criteria;
		return $this->collAccessTokens;
	}

	/**
	 * Returns the number of related AccessToken objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AccessToken objects.
	 * @throws     PropelException
	 */
	public function countAccessTokens(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAccessTokens === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AccessTokenPeer::USER_ID, $this->id);

				$count = AccessTokenPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AccessTokenPeer::USER_ID, $this->id);

				if (!isset($this->lastAccessTokenCriteria) || !$this->lastAccessTokenCriteria->equals($criteria)) {
					$count = AccessTokenPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAccessTokens);
				}
			} else {
				$count = count($this->collAccessTokens);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AccessToken object to this object
	 * through the AccessToken foreign key attribute.
	 *
	 * @param      AccessToken $l AccessToken
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAccessToken(AccessToken $l)
	{
		if ($this->collAccessTokens === null) {
			$this->initAccessTokens();
		}
		if (!in_array($l, $this->collAccessTokens, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAccessTokens, $l);
			$l->setsfGuardUser($this);
		}
	}

	/**
	 * Clears out the collsfGuardUserPermissions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardUserPermissions()
	 */
	public function clearsfGuardUserPermissions()
	{
		$this->collsfGuardUserPermissions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardUserPermissions collection (array).
	 *
	 * By default this just sets the collsfGuardUserPermissions collection to an empty array (like clearcollsfGuardUserPermissions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardUserPermissions()
	{
		$this->collsfGuardUserPermissions = array();
	}

	/**
	 * Gets an array of sfGuardUserPermission objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardUserPermissions from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardUserPermission[]
	 * @throws     PropelException
	 */
	public function getsfGuardUserPermissions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
			   $this->collsfGuardUserPermissions = array();
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				sfGuardUserPermissionPeer::addSelectColumns($criteria);
				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				sfGuardUserPermissionPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
					$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardUserPermissionCriteria = $criteria;
		return $this->collsfGuardUserPermissions;
	}

	/**
	 * Returns the number of related sfGuardUserPermission objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardUserPermission objects.
	 * @throws     PropelException
	 */
	public function countsfGuardUserPermissions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				$count = sfGuardUserPermissionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
					$count = sfGuardUserPermissionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collsfGuardUserPermissions);
				}
			} else {
				$count = count($this->collsfGuardUserPermissions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardUserPermission object to this object
	 * through the sfGuardUserPermission foreign key attribute.
	 *
	 * @param      sfGuardUserPermission $l sfGuardUserPermission
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardUserPermission(sfGuardUserPermission $l)
	{
		if ($this->collsfGuardUserPermissions === null) {
			$this->initsfGuardUserPermissions();
		}
		if (!in_array($l, $this->collsfGuardUserPermissions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardUserPermissions, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related sfGuardUserPermissions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getsfGuardUserPermissionsJoinsfGuardPermission($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
				$this->collsfGuardUserPermissions = array();
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelectJoinsfGuardPermission($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

			if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelectJoinsfGuardPermission($criteria, $con, $join_behavior);
			}
		}
		$this->lastsfGuardUserPermissionCriteria = $criteria;

		return $this->collsfGuardUserPermissions;
	}

	/**
	 * Clears out the collsfGuardUserGroups collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardUserGroups()
	 */
	public function clearsfGuardUserGroups()
	{
		$this->collsfGuardUserGroups = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardUserGroups collection (array).
	 *
	 * By default this just sets the collsfGuardUserGroups collection to an empty array (like clearcollsfGuardUserGroups());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardUserGroups()
	{
		$this->collsfGuardUserGroups = array();
	}

	/**
	 * Gets an array of sfGuardUserGroup objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardUserGroups from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardUserGroup[]
	 * @throws     PropelException
	 */
	public function getsfGuardUserGroups($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
			   $this->collsfGuardUserGroups = array();
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				sfGuardUserGroupPeer::addSelectColumns($criteria);
				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				sfGuardUserGroupPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
					$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardUserGroupCriteria = $criteria;
		return $this->collsfGuardUserGroups;
	}

	/**
	 * Returns the number of related sfGuardUserGroup objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardUserGroup objects.
	 * @throws     PropelException
	 */
	public function countsfGuardUserGroups(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				$count = sfGuardUserGroupPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
					$count = sfGuardUserGroupPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collsfGuardUserGroups);
				}
			} else {
				$count = count($this->collsfGuardUserGroups);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardUserGroup object to this object
	 * through the sfGuardUserGroup foreign key attribute.
	 *
	 * @param      sfGuardUserGroup $l sfGuardUserGroup
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardUserGroup(sfGuardUserGroup $l)
	{
		if ($this->collsfGuardUserGroups === null) {
			$this->initsfGuardUserGroups();
		}
		if (!in_array($l, $this->collsfGuardUserGroups, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardUserGroups, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related sfGuardUserGroups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getsfGuardUserGroupsJoinsfGuardGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
				$this->collsfGuardUserGroups = array();
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelectJoinsfGuardGroup($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

			if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelectJoinsfGuardGroup($criteria, $con, $join_behavior);
			}
		}
		$this->lastsfGuardUserGroupCriteria = $criteria;

		return $this->collsfGuardUserGroups;
	}

	/**
	 * Clears out the collsfGuardRememberKeys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardRememberKeys()
	 */
	public function clearsfGuardRememberKeys()
	{
		$this->collsfGuardRememberKeys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardRememberKeys collection (array).
	 *
	 * By default this just sets the collsfGuardRememberKeys collection to an empty array (like clearcollsfGuardRememberKeys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardRememberKeys()
	{
		$this->collsfGuardRememberKeys = array();
	}

	/**
	 * Gets an array of sfGuardRememberKey objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardRememberKeys from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardRememberKey[]
	 * @throws     PropelException
	 */
	public function getsfGuardRememberKeys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardRememberKeys === null) {
			if ($this->isNew()) {
			   $this->collsfGuardRememberKeys = array();
			} else {

				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				sfGuardRememberKeyPeer::addSelectColumns($criteria);
				$this->collsfGuardRememberKeys = sfGuardRememberKeyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				sfGuardRememberKeyPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardRememberKeyCriteria) || !$this->lastsfGuardRememberKeyCriteria->equals($criteria)) {
					$this->collsfGuardRememberKeys = sfGuardRememberKeyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardRememberKeyCriteria = $criteria;
		return $this->collsfGuardRememberKeys;
	}

	/**
	 * Returns the number of related sfGuardRememberKey objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardRememberKey objects.
	 * @throws     PropelException
	 */
	public function countsfGuardRememberKeys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardRememberKeys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				$count = sfGuardRememberKeyPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardRememberKeyCriteria) || !$this->lastsfGuardRememberKeyCriteria->equals($criteria)) {
					$count = sfGuardRememberKeyPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collsfGuardRememberKeys);
				}
			} else {
				$count = count($this->collsfGuardRememberKeys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardRememberKey object to this object
	 * through the sfGuardRememberKey foreign key attribute.
	 *
	 * @param      sfGuardRememberKey $l sfGuardRememberKey
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardRememberKey(sfGuardRememberKey $l)
	{
		if ($this->collsfGuardRememberKeys === null) {
			$this->initsfGuardRememberKeys();
		}
		if (!in_array($l, $this->collsfGuardRememberKeys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardRememberKeys, $l);
			$l->setsfGuardUser($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collsfGuardUserProfiles) {
				foreach ((array) $this->collsfGuardUserProfiles as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSystematicReviewsRelatedByCreatedBy) {
				foreach ((array) $this->collSystematicReviewsRelatedByCreatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSystematicReviewsRelatedByUpdatedBy) {
				foreach ((array) $this->collSystematicReviewsRelatedByUpdatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSystematicReviewsRelatedByDeletedBy) {
				foreach ((array) $this->collSystematicReviewsRelatedByDeletedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSystematicReviewUsers) {
				foreach ((array) $this->collSystematicReviewUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStudysRelatedByCastingVote) {
				foreach ((array) $this->collStudysRelatedByCastingVote as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStudysRelatedByCreatedBy) {
				foreach ((array) $this->collStudysRelatedByCreatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStudysRelatedByUpdatedBy) {
				foreach ((array) $this->collStudysRelatedByUpdatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStudysRelatedByDeletedBy) {
				foreach ((array) $this->collStudysRelatedByDeletedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStudyUserCriterias) {
				foreach ((array) $this->collStudyUserCriterias as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collQuestionnairesRelatedByCreatedBy) {
				foreach ((array) $this->collQuestionnairesRelatedByCreatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collQuestionnairesRelatedByUpdatedBy) {
				foreach ((array) $this->collQuestionnairesRelatedByUpdatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collQuestionnairesRelatedByDeletedBy) {
				foreach ((array) $this->collQuestionnairesRelatedByDeletedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collQuestionsRelatedByCreatedBy) {
				foreach ((array) $this->collQuestionsRelatedByCreatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collQuestionsRelatedByUpdatedBy) {
				foreach ((array) $this->collQuestionsRelatedByUpdatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collQuestionsRelatedByDeletedBy) {
				foreach ((array) $this->collQuestionsRelatedByDeletedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAnswersRelatedByCreatedBy) {
				foreach ((array) $this->collAnswersRelatedByCreatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAnswersRelatedByUpdatedBy) {
				foreach ((array) $this->collAnswersRelatedByUpdatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAnswersRelatedByDeletedBy) {
				foreach ((array) $this->collAnswersRelatedByDeletedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRslCriteriasRelatedByCreatedBy) {
				foreach ((array) $this->collRslCriteriasRelatedByCreatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRslCriteriasRelatedByUpdatedBy) {
				foreach ((array) $this->collRslCriteriasRelatedByUpdatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRslCriteriasRelatedByDeletedBy) {
				foreach ((array) $this->collRslCriteriasRelatedByDeletedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRslResultsRelatedByCreatedBy) {
				foreach ((array) $this->collRslResultsRelatedByCreatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRslResultsRelatedByUpdatedBy) {
				foreach ((array) $this->collRslResultsRelatedByUpdatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRslResultsRelatedByDeletedBy) {
				foreach ((array) $this->collRslResultsRelatedByDeletedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJobsRelatedByUserId) {
				foreach ((array) $this->collJobsRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJobsRelatedByFinishedBy) {
				foreach ((array) $this->collJobsRelatedByFinishedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDataExtractionsRelatedByCreatedBy) {
				foreach ((array) $this->collDataExtractionsRelatedByCreatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDataExtractionsRelatedByUpdatedBy) {
				foreach ((array) $this->collDataExtractionsRelatedByUpdatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDataExtractionsRelatedByDeletedBy) {
				foreach ((array) $this->collDataExtractionsRelatedByDeletedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAccessTokens) {
				foreach ((array) $this->collAccessTokens as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfGuardUserPermissions) {
				foreach ((array) $this->collsfGuardUserPermissions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfGuardUserGroups) {
				foreach ((array) $this->collsfGuardUserGroups as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfGuardRememberKeys) {
				foreach ((array) $this->collsfGuardRememberKeys as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collsfGuardUserProfiles = null;
		$this->collSystematicReviewsRelatedByCreatedBy = null;
		$this->collSystematicReviewsRelatedByUpdatedBy = null;
		$this->collSystematicReviewsRelatedByDeletedBy = null;
		$this->collSystematicReviewUsers = null;
		$this->collStudysRelatedByCastingVote = null;
		$this->collStudysRelatedByCreatedBy = null;
		$this->collStudysRelatedByUpdatedBy = null;
		$this->collStudysRelatedByDeletedBy = null;
		$this->collStudyUserCriterias = null;
		$this->collQuestionnairesRelatedByCreatedBy = null;
		$this->collQuestionnairesRelatedByUpdatedBy = null;
		$this->collQuestionnairesRelatedByDeletedBy = null;
		$this->collQuestionsRelatedByCreatedBy = null;
		$this->collQuestionsRelatedByUpdatedBy = null;
		$this->collQuestionsRelatedByDeletedBy = null;
		$this->collAnswersRelatedByCreatedBy = null;
		$this->collAnswersRelatedByUpdatedBy = null;
		$this->collAnswersRelatedByDeletedBy = null;
		$this->collRslCriteriasRelatedByCreatedBy = null;
		$this->collRslCriteriasRelatedByUpdatedBy = null;
		$this->collRslCriteriasRelatedByDeletedBy = null;
		$this->collRslResultsRelatedByCreatedBy = null;
		$this->collRslResultsRelatedByUpdatedBy = null;
		$this->collRslResultsRelatedByDeletedBy = null;
		$this->collJobsRelatedByUserId = null;
		$this->collJobsRelatedByFinishedBy = null;
		$this->collDataExtractionsRelatedByCreatedBy = null;
		$this->collDataExtractionsRelatedByUpdatedBy = null;
		$this->collDataExtractionsRelatedByDeletedBy = null;
		$this->collAccessTokens = null;
		$this->collsfGuardUserPermissions = null;
		$this->collsfGuardUserGroups = null;
		$this->collsfGuardRememberKeys = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasesfGuardUser:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasesfGuardUser::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasesfGuardUser
